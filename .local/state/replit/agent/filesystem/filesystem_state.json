{"file_contents":{"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/App.tsx":{"content":"\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { LanguageProvider } from \"@/contexts/LanguageContext\";\nimport Home from \"@/pages/Home\";\nimport CreateAd from \"@/pages/CreateAd\";\nimport MyAds from \"@/pages/MyAds\";\nimport Tasks from \"@/pages/Tasks\";\nimport Profile from \"@/pages/Profile\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/create-ad\" component={CreateAd} />\n      <Route path=\"/myads\" component={MyAds} />\n      <Route path=\"/tasks\" component={Tasks} />\n      <Route path=\"/profile\" component={Profile} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <LanguageProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </LanguageProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1096},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/TabNavigation.tsx":{"content":"export default function TabNavigation() {\n  return (\n    <div className=\"border-b border-border\">\n      <div className=\"flex gap-4 sm:gap-6 px-3 sm:px-4\">\n        <div className=\"relative pb-2.5 sm:pb-3 pt-3 sm:pt-4 text-sm sm:text-[15px] font-medium text-primary\" data-testid=\"tab-all\">\n          All items\n          <div className=\"absolute bottom-0 left-0 right-0 h-[2.5px] sm:h-[3px] bg-primary rounded-t-sm\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":462},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/GiftPickerModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Search, X } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface Gift {\n  id: string;\n  name: string;\n  image: string;\n}\n\ninterface GiftPickerModalProps {\n  open: boolean;\n  onClose: () => void;\n  gifts: Gift[];\n  selectedGiftIds?: string[];\n  onSelectGifts: (giftIds: string[]) => void;\n}\n\nexport default function GiftPickerModal({\n  open,\n  onClose,\n  gifts,\n  selectedGiftIds = [],\n  onSelectGifts,\n}: GiftPickerModalProps) {\n  const { t } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [localSelectedIds, setLocalSelectedIds] = useState<string[]>(selectedGiftIds);\n\n  useEffect(() => {\n    if (open) {\n      setLocalSelectedIds(selectedGiftIds);\n      setSearchQuery(\"\");\n    }\n  }, [open, selectedGiftIds]);\n\n  const filteredGifts = gifts.filter((gift) =>\n    gift.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleToggleGift = (giftId: string) => {\n    if (giftId === \"\") {\n      setLocalSelectedIds([]);\n    } else {\n      setLocalSelectedIds((prev) =>\n        prev.includes(giftId)\n          ? prev.filter((id) => id !== giftId)\n          : [...prev, giftId]\n      );\n    }\n  };\n\n  const handleApply = () => {\n    onSelectGifts(localSelectedIds);\n    onClose();\n  };\n\n  const handleCancel = () => {\n    setLocalSelectedIds([]);\n    setSearchQuery(\"\");\n    onClose();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={(open) => { if (!open) return; handleCancel(); }}>\n      <DialogContent className=\"max-w-[95vw] sm:max-w-md max-h-[90vh] p-0 bg-card border-card-border rounded-2xl mx-4\">\n        <DialogHeader className=\"px-4 sm:px-6 pt-5 sm:pt-6 pb-3 sm:pb-4 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <DialogTitle className=\"text-foreground text-lg sm:text-xl font-bold\">\n                🎁 {t.giftPicker.title}\n              </DialogTitle>\n              {localSelectedIds.length > 0 && (\n                <span className=\"text-primary text-xs sm:text-sm font-medium mt-1 block\">\n                  {t.giftPicker.selected(localSelectedIds.length)}\n                </span>\n              )}\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleCancel}\n              className=\"w-9 h-9 sm:w-10 sm:h-10 rounded-full hover:bg-muted flex-shrink-0\"\n            >\n              <X className=\"w-4 h-4 sm:w-5 sm:h-5 text-muted-foreground\" />\n            </Button>\n          </div>\n          <DialogDescription className=\"text-muted-foreground text-xs sm:text-sm mt-1.5\">\n            {t.giftPicker.description}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"px-4 sm:px-6 py-3 sm:py-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 sm:left-4 top-1/2 -translate-y-1/2 w-4 h-4 sm:w-5 sm:h-5 text-muted-foreground\" />\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder={t.giftPicker.searchPlaceholder}\n              className=\"w-full h-11 sm:h-12 pl-10 sm:pl-12 pr-3 sm:pr-4 text-sm bg-muted/50 border border-border rounded-xl text-foreground placeholder:text-muted-foreground focus:outline-none focus:border-primary/50 focus:bg-muted/80 transition-all duration-200\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto px-4 sm:px-6 pb-4 sm:pb-6 max-h-[45vh] sm:max-h-[50vh] scroll-smooth\">\n          <div className=\"space-y-2.5 sm:space-y-3\">\n            <button\n              onClick={() => handleToggleGift(\"\")}\n              className={`w-full flex items-center gap-3 sm:gap-4 p-3 sm:p-4 rounded-xl transition-all duration-200 active:scale-[0.98] ${\n                localSelectedIds.length === 0\n                  ? \"bg-primary/10 border-2 border-primary/30\"\n                  : \"hover:bg-muted/50 border-2 border-transparent\"\n              }`}\n            >\n              <div className=\"w-11 h-11 sm:w-12 sm:h-12 rounded-xl bg-muted flex items-center justify-center shadow-sm flex-shrink-0\">\n                <span className=\"text-xl sm:text-2xl\">🎁</span>\n              </div>\n              <div className=\"flex-1 text-left min-w-0\">\n                <span className=\"text-foreground font-medium text-sm block truncate\">{t.giftPicker.allGifts}</span>\n                <p className=\"text-muted-foreground text-xs mt-0.5 truncate\">{t.giftPicker.clearFilters}</p>\n              </div>\n              {localSelectedIds.length === 0 && (\n                <div className=\"w-5 h-5 sm:w-6 sm:h-6 rounded-full bg-primary flex items-center justify-center flex-shrink-0\">\n                  <span className=\"text-white text-[10px] sm:text-xs\">✓</span>\n                </div>\n              )}\n            </button>\n\n            {filteredGifts.map((gift) => (\n              <button\n                key={gift.id}\n                onClick={() => handleToggleGift(gift.id)}\n                className={`w-full flex items-center gap-3 sm:gap-4 p-3 sm:p-4 rounded-xl transition-all duration-200 active:scale-[0.98] ${\n                  localSelectedIds.includes(gift.id)\n                    ? \"bg-primary/10 border-2 border-primary/30\"\n                    : \"hover:bg-muted/50 border-2 border-transparent\"\n                }`}\n              >\n                <div className=\"w-11 h-11 sm:w-12 sm:h-12 rounded-xl overflow-hidden bg-white shadow-sm flex-shrink-0\">\n                  <img\n                    src={gift.image}\n                    alt={gift.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n                <div className=\"flex-1 text-left min-w-0\">\n                  <span className=\"text-foreground font-medium text-sm block truncate\">{gift.name}</span>\n                  <p className=\"text-muted-foreground text-xs mt-0.5 truncate\">\n                    {localSelectedIds.includes(gift.id) ? t.giftPicker.tapToRemove : t.giftPicker.tapToAdd}\n                  </p>\n                </div>\n                {localSelectedIds.includes(gift.id) && (\n                  <div className=\"w-5 h-5 sm:w-6 sm:h-6 rounded-full bg-primary flex items-center justify-center flex-shrink-0\">\n                    <span className=\"text-white text-[10px] sm:text-xs\">✓</span>\n                  </div>\n                )}\n              </button>\n            ))}\n\n            {filteredGifts.length === 0 && searchQuery && (\n              <div className=\"text-center py-8\">\n                <div className=\"w-14 h-14 sm:w-16 sm:h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-3 sm:mb-4\">\n                  <span className=\"text-xl sm:text-2xl\">🔍</span>\n                </div>\n                <p className=\"text-muted-foreground text-sm\">{t.giftPicker.noGiftsFound}</p>\n                <p className=\"text-muted-foreground text-xs mt-1\">{t.giftPicker.tryDifferentSearch}</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"px-4 sm:px-6 pb-4 sm:pb-6 pt-3 sm:pt-4 border-t border-border bg-background sticky bottom-0\">\n          <div className=\"flex gap-2.5 sm:gap-3\">\n            <Button\n              variant=\"outline\"\n              onClick={handleCancel}\n              className=\"flex-1 h-11 sm:h-12 rounded-xl border-border hover:bg-muted/50 text-sm\"\n            >\n              {t.giftPicker.cancel}\n            </Button>\n            <Button\n              onClick={handleApply}\n              className=\"flex-1 h-11 sm:h-12 rounded-xl bg-primary hover:bg-primary/90 text-sm\"\n            >\n              {t.giftPicker.apply} {localSelectedIds.length > 0 && `(${localSelectedIds.length})`}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8074},"server/storage.ts":{"content":"import { type User, type InsertUser, type Gift, type Channel, type InsertChannel } from \"@shared/schema\";\nimport { AVAILABLE_GIFTS } from \"@shared/gifts\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  getAllGifts(): Promise<Gift[]>;\n  getGiftById(id: string): Promise<Gift | undefined>;\n  \n  getAllChannels(): Promise<(Channel & { giftName: string; giftImage: string })[]>;\n  getChannelById(id: string): Promise<(Channel & { giftName: string; giftImage: string }) | undefined>;\n  createChannel(channel: InsertChannel): Promise<Channel & { giftName: string; giftImage: string }>;\n  updateChannel(id: string, channel: Partial<InsertChannel>): Promise<(Channel & { giftName: string; giftImage: string }) | undefined>;\n  deleteChannel(id: string): Promise<boolean>;\n  searchChannelsByGiftName(query: string): Promise<(Channel & { giftName: string; giftImage: string })[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private gifts: Map<string, Gift>;\n  private channels: Map<string, Channel>;\n\n  constructor() {\n    this.users = new Map();\n    this.gifts = new Map();\n    this.channels = new Map();\n    this.seedGifts();\n    this.seedChannels();\n  }\n\n  private seedGifts() {\n    AVAILABLE_GIFTS.forEach((gift) => {\n      this.gifts.set(gift.id, gift);\n    });\n  }\n\n  private seedChannels() {\n    const seedData: Channel[] = [\n      {\n        id: randomUUID(),\n        channelName: \"Bear Shop\",\n        telegramLink: \"https://t.me/bears_shop\",\n        giftId: \"box-of-chocolates\",\n        price: \"29\",\n        ownerId: null,\n        gifts: JSON.stringify([{ giftId: \"box-of-chocolates\", quantity: 1 }]),\n      },\n      {\n        id: randomUUID(),\n        channelName: \"Anna's Sweets\",\n        telegramLink: \"https://t.me/anna_sweets\",\n        giftId: \"cherry-cake\",\n        price: \"10.49\",\n        ownerId: null,\n        gifts: JSON.stringify([{ giftId: \"cherry-cake\", quantity: 1 }]),\n      },\n      {\n        id: randomUUID(),\n        channelName: \"Holiday Gifts\",\n        telegramLink: \"https://t.me/holiday_gifts\",\n        giftId: \"gift-bag\",\n        price: \"15.99\",\n        ownerId: null,\n        gifts: JSON.stringify([{ giftId: \"gift-bag\", quantity: 1 }]),\n      },\n      {\n        id: randomUUID(),\n        channelName: \"Ice Cream Joy\",\n        telegramLink: \"https://t.me/icecream_joy\",\n        giftId: \"ice-cream-cone\",\n        price: \"22.50\",\n        ownerId: null,\n        gifts: JSON.stringify([{ giftId: \"ice-cream-cone\", quantity: 1 }]),\n      },\n    ];\n\n    seedData.forEach((channel) => {\n      this.channels.set(channel.id, channel);\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getAllGifts(): Promise<Gift[]> {\n    return Array.from(this.gifts.values());\n  }\n\n  async getGiftById(id: string): Promise<Gift | undefined> {\n    return this.gifts.get(id);\n  }\n\n  async getAllChannels(): Promise<(Channel & { giftName: string; giftImage: string })[]> {\n    return Array.from(this.channels.values()).map(channel => {\n      const gift = this.gifts.get(channel.giftId);\n      return {\n        ...channel,\n        giftName: gift?.name || \"\",\n        giftImage: gift?.image || \"\",\n      };\n    });\n  }\n\n  async getChannelById(id: string): Promise<(Channel & { giftName: string; giftImage: string }) | undefined> {\n    const channel = this.channels.get(id);\n    if (!channel) return undefined;\n    \n    const gift = this.gifts.get(channel.giftId);\n    return {\n      ...channel,\n      giftName: gift?.name || \"\",\n      giftImage: gift?.image || \"\",\n    };\n  }\n\n  async createChannel(insertChannel: InsertChannel): Promise<Channel & { giftName: string; giftImage: string }> {\n    const id = randomUUID();\n    const channel: Channel = { \n      ...insertChannel,\n      id,\n      ownerId: insertChannel.ownerId ?? null,\n      gifts: insertChannel.gifts ?? null,\n    };\n    this.channels.set(id, channel);\n    \n    const gift = this.gifts.get(channel.giftId);\n    return {\n      ...channel,\n      giftName: gift?.name || \"\",\n      giftImage: gift?.image || \"\",\n    };\n  }\n\n  async updateChannel(id: string, updates: Partial<InsertChannel>): Promise<(Channel & { giftName: string; giftImage: string }) | undefined> {\n    const channel = this.channels.get(id);\n    if (!channel) return undefined;\n\n    const updated = { ...channel, ...updates };\n    this.channels.set(id, updated);\n    \n    const gift = this.gifts.get(updated.giftId);\n    return {\n      ...updated,\n      giftName: gift?.name || \"\",\n      giftImage: gift?.image || \"\",\n    };\n  }\n\n  async deleteChannel(id: string): Promise<boolean> {\n    return this.channels.delete(id);\n  }\n\n  async searchChannelsByGiftName(query: string): Promise<(Channel & { giftName: string; giftImage: string })[]> {\n    const lowerQuery = query.toLowerCase();\n    const allChannels = await this.getAllChannels();\n    \n    return allChannels.filter(channel => \n      channel.giftName.toLowerCase().includes(lowerQuery) ||\n      channel.channelName.toLowerCase().includes(lowerQuery)\n    );\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":5641},"client/src/components/examples/NFTGrid.tsx":{"content":"import NFTGrid from '../NFTGrid';\n\nexport default function NFTGridExample() {\n  return <NFTGrid />;\n}\n","size_bytes":102},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/pages/Tasks.tsx":{"content":"import { useState } from \"react\";\nimport { CheckCircle2, Circle, Gift } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport TopHeader from \"@/components/TopHeader\";\nimport BottomNav from \"@/components/BottomNav\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport tonLogo from \"@assets/toncoin_1760893904370.png\";\n\ninterface Task {\n  id: string;\n  titleKey: keyof typeof import(\"@/lib/i18n\").translations.en.tasks;\n  descriptionKey: string;\n  reward: string;\n  completed: boolean;\n}\n\nexport default function Tasks() {\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  \n  const mockTasks: Task[] = [\n    {\n      id: \"1\",\n      titleKey: \"task1\" as any,\n      descriptionKey: \"title\",\n      reward: \"5\",\n      completed: false,\n    },\n    {\n      id: \"2\",\n      titleKey: \"task2\" as any,\n      descriptionKey: \"title\",\n      reward: \"10\",\n      completed: false,\n    },\n    {\n      id: \"3\",\n      titleKey: \"task3\" as any,\n      descriptionKey: \"title\",\n      reward: \"3\",\n      completed: false,\n    },\n    {\n      id: \"4\",\n      titleKey: \"task4\" as any,\n      descriptionKey: \"title\",\n      reward: \"2\",\n      completed: false,\n    },\n    {\n      id: \"5\",\n      titleKey: \"task5\" as any,\n      descriptionKey: \"title\",\n      reward: \"7\",\n      completed: false,\n    },\n  ];\n  \n  const [tasks, setTasks] = useState<Task[]>(mockTasks);\n\n  const handleClaimReward = (taskId: string) => {\n    setTasks(tasks.map(task => \n      task.id === taskId ? { ...task, completed: true } : task\n    ));\n    \n    const task = tasks.find(t => t.id === taskId);\n    if (task) {\n      toast({\n        title: t.toast.rewardClaimed,\n        description: t.toast.tonAdded(task.reward),\n      });\n    }\n  };\n\n  const completedCount = tasks.filter(t => t.completed).length;\n  const totalReward = tasks.filter(t => t.completed).reduce((sum, t) => sum + parseFloat(t.reward), 0);\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <TopHeader />\n      \n      <div className=\"px-4 py-6 pb-24\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h1 className=\"text-xl font-semibold text-foreground\" data-testid=\"text-title\">\n            {t.tasks.title}\n          </h1>\n          <div className=\"text-sm text-muted-foreground\" data-testid=\"text-progress\">\n            {completedCount} / {tasks.length}\n          </div>\n        </div>\n\n        <div className=\"bg-card border border-card-border rounded-2xl p-4 mb-6\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center\">\n              <Gift className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"text-sm text-muted-foreground\">{t.tasks.totalEarned}</p>\n              <div className=\"flex items-center gap-1.5 mt-1\">\n                <img src={tonLogo} alt=\"TON\" className=\"w-4 h-4 rounded-full object-cover\" />\n                <span className=\"text-lg font-semibold text-foreground\" data-testid=\"text-total-reward\">\n                  {totalReward.toFixed(2)} TON\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-3\">\n          {tasks.map((task) => (\n            <div\n              key={task.id}\n              className={`bg-card border border-card-border rounded-xl p-4 transition-all ${\n                task.completed ? 'opacity-60' : ''\n              }`}\n              data-testid={`task-${task.id}`}\n            >\n              <div className=\"flex items-start gap-3\">\n                <div className=\"mt-1\">\n                  {task.completed ? (\n                    <CheckCircle2 className=\"w-5 h-5 text-primary\" />\n                  ) : (\n                    <Circle className=\"w-5 h-5 text-muted-foreground\" />\n                  )}\n                </div>\n                \n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-foreground mb-1\" data-testid={`text-task-title-${task.id}`}>\n                    {(t.tasks[task.titleKey] as any).title}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    {(t.tasks[task.titleKey] as any).description}\n                  </p>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-1.5 px-3 py-1.5 bg-primary/10 rounded-full\">\n                      <img src={tonLogo} alt=\"TON\" className=\"w-3.5 h-3.5 rounded-full object-cover\" />\n                      <span className=\"text-sm font-semibold text-primary\" data-testid={`text-reward-${task.id}`}>\n                        +{task.reward} TON\n                      </span>\n                    </div>\n                    \n                    {!task.completed && (\n                      <Button\n                        size=\"sm\"\n                        className=\"bg-primary hover-elevate active-elevate-2\"\n                        onClick={() => handleClaimReward(task.id)}\n                        data-testid={`button-claim-${task.id}`}\n                      >\n                        {t.tasks.claim}\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <BottomNav activeTab=\"tasks\" />\n    </div>\n  );\n}\n","size_bytes":5544},"client/src/components/examples/FilterBar.tsx":{"content":"import FilterBar from '../FilterBar';\n\nexport default function FilterBarExample() {\n  return <FilterBar />;\n}\n","size_bytes":110},"client/src/components/examples/TabNavigation.tsx":{"content":"import TabNavigation from '../TabNavigation';\n\nexport default function TabNavigationExample() {\n  return <TabNavigation />;\n}\n","size_bytes":126},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/examples/BottomNav.tsx":{"content":"import BottomNav from '../BottomNav';\n\nexport default function BottomNavExample() {\n  return <BottomNav />;\n}\n","size_bytes":110},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/NFTCard.tsx":{"content":"import { Lock } from \"lucide-react\";\nimport tonLogo from \"@assets/toncoin_1760893904370.png\";\n\ninterface NFTCardProps {\n  giftName: string;\n  channelName: string;\n  price: string;\n  image: string;\n  locked?: boolean;\n}\n\nexport default function NFTCard({ giftName, channelName, price, image, locked = false }: NFTCardProps) {\n  return (\n    <div\n      className=\"group rounded-2xl overflow-hidden cursor-pointer transition-all duration-300 bg-card border border-card-border hover:border-primary/30 active:scale-[0.98] shadow-sm hover:shadow-md\"\n      onClick={() => console.log(`Channel clicked: ${channelName}`)}\n      data-testid={`card-channel-${channelName}`}\n    >\n      <div className=\"relative aspect-square bg-gray-100 dark:bg-gray-800\">\n        <img\n          src={image}\n          alt={giftName}\n          className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-105\"\n          data-testid={`img-gift-${giftName}`}\n        />\n        {locked && (\n          <div className=\"absolute top-2 right-2 w-6 h-6 flex items-center justify-center bg-background/90 rounded-full border border-border\">\n            <Lock className=\"w-3 h-3 text-muted-foreground\" />\n          </div>\n        )}\n      </div>\n\n      <div className=\"p-3 sm:p-4 space-y-3\">\n        <div className=\"space-y-1\">\n          <h3 className=\"text-sm sm:text-base font-semibold text-foreground line-clamp-1\" data-testid={`text-gift-name-${giftName}`}>\n            {giftName}\n          </h3>\n          <p className=\"text-xs sm:text-sm text-muted-foreground line-clamp-1\" data-testid={`text-channel-name-${channelName}`}>\n            {channelName}\n          </p>\n        </div>\n\n        <button\n          className=\"w-full flex items-center justify-center gap-2 px-4 py-2.5 sm:py-3 bg-blue-500 hover:bg-blue-600 rounded-xl transition-all active:scale-95\"\n          onClick={(e) => {\n            e.stopPropagation();\n            console.log(`Buy clicked: ${channelName}`);\n          }}\n        >\n          <img src={tonLogo} alt=\"TON\" className=\"w-4 h-4 sm:w-5 sm:h-5 rounded-full object-cover\" />\n          <span className=\"text-sm sm:text-base font-bold text-white\" data-testid={`text-price-${channelName}`}>\n            {price} TON\n          </span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2299},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/SearchBar.tsx":{"content":"import { Search } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface SearchBarProps {\n  onSearchChange?: (query: string) => void;\n}\n\nexport default function SearchBar({ onSearchChange }: SearchBarProps) {\n  const { t } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearchChange = (value: string) => {\n    setSearchQuery(value);\n    onSearchChange?.(value);\n    console.log('Search query:', value);\n  };\n\n  return (\n    <div className=\"px-3 sm:px-4 pb-3\">\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 sm:w-5 sm:h-5 text-muted-foreground/60 pointer-events-none z-10\" />\n        <input\n          type=\"search\"\n          placeholder={t.home.searchPlaceholder}\n          value={searchQuery}\n          onChange={(e) => onSearchChange?.(e.target.value)}\n          className=\"w-full h-11 sm:h-12 pl-9 sm:pl-11 pr-4 text-sm sm:text-base bg-card/50 border border-card-border rounded-xl text-foreground placeholder:text-muted-foreground/70 focus:outline-none focus:border-primary/50 focus:bg-card/80 transition-all duration-200\"\n          data-testid=\"input-search\"\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":1273},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    host: \"0.0.0.0\",\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2366},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/examples/SearchBar.tsx":{"content":"import SearchBar from '../SearchBar';\n\nexport default function SearchBarExample() {\n  return <SearchBar />;\n}\n","size_bytes":110},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] border bg-background shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        \"mx-4 max-h-[90vh] overflow-hidden\", // Mobile optimizations\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3483},"client/src/components/examples/TopHeader.tsx":{"content":"import TopHeader from '../TopHeader';\n\nexport default function TopHeaderExample() {\n  return <TopHeader />;\n}\n","size_bytes":110},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport TopHeader from \"@/components/TopHeader\";\nimport CashbackBanner from \"@/components/CashbackBanner\";\nimport FilterBar from \"@/components/FilterBar\";\nimport SearchBar from \"@/components/SearchBar\";\nimport NFTGrid from \"@/components/NFTGrid\";\nimport BottomNav from \"@/components/BottomNav\";\nimport MyAds from \"./MyAds\";\nimport Tasks from \"./Tasks\";\nimport Profile from \"./Profile\";\n\ntype Page = \"store\" | \"myads\" | \"tasks\" | \"profile\";\n\nexport default function Home() {\n  const [currentPage, setCurrentPage] = useState<Page>(\"store\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [giftFilter, setGiftFilter] = useState<string[]>([]);\n\n  if (currentPage === \"myads\") {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground telegram-mini-app pb-20 sm:pb-24\">\n        <MyAds />\n        <BottomNav activeTab={currentPage} onTabChange={setCurrentPage} />\n      </div>\n    );\n  }\n\n  if (currentPage === \"tasks\") {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground telegram-mini-app pb-20 sm:pb-24\">\n        <Tasks />\n        <BottomNav activeTab={currentPage} onTabChange={setCurrentPage} />\n      </div>\n    );\n  }\n\n  if (currentPage === \"profile\") {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground telegram-mini-app pb-20 sm:pb-24\">\n        <Profile />\n        <BottomNav activeTab={currentPage} onTabChange={setCurrentPage} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground telegram-mini-app pb-20 sm:pb-24\">\n      <TopHeader />\n      <CashbackBanner />\n      <FilterBar onGiftFilterChange={setGiftFilter} />\n      <SearchBar onSearchChange={setSearchQuery} />\n      <NFTGrid searchQuery={searchQuery} giftFilter={giftFilter} />\n      <BottomNav activeTab={currentPage} onTabChange={setCurrentPage} />\n    </div>\n  );\n}\n","size_bytes":1905},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/main.tsx":{"content":"\nimport { createRoot } from \"react-dom/client\";\nimport { TonConnectUIProvider } from '@tonconnect/ui-react';\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst manifestUrl = 'https://4a6a4d09-c68b-481c-9974-30fc162da62a-00-35hnxvckxlwnb.riker.replit.dev/tonconnect-manifest.json';\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <TonConnectUIProvider \n    manifestUrl={manifestUrl}\n    actionsConfiguration={{\n      twaReturnUrl: 'https://4a6a4d09-c68b-481c-9974-30fc162da62a-00-35hnxvckxlwnb.riker.replit.dev'\n    }}\n  >\n    <App />\n  </TonConnectUIProvider>\n);\n","size_bytes":574},"replit.md":{"content":"# NFT Marketplace - LootGifts\n\n## Overview\n\nLootGifts is a mobile-first NFT marketplace application built with React, Express, and PostgreSQL. The application enables users to browse, create, and manage NFT listings with a dark-themed interface optimized for TON blockchain integration. The platform features a three-tab navigation system (Store, My Ads, Tasks) and provides filtering, searching, and CRUD operations for NFT items.\n\n## Recent Changes (October 20, 2025)\n\n**Design Improvements**\n- Replaced blue gradient card backgrounds with elegant dark design using zinc color palette\n- Added subtle borders and hover effects (border-zinc-800/50, hover:border-zinc-700/70)\n- Implemented smooth transitions and scale effects on cards (group-hover:scale-105 on images)\n- Updated search bar to blend with background (bg-zinc-900/30, border-zinc-800/50)\n- Removed bright accent colors in favor of cohesive dark theme\n\n**Multi-Gift Support**\n- Extended channel creation to support multiple gifts with individual quantities\n- Added `gifts` field to Channel schema (JSON text field storing array of {giftId, quantity})\n- Created new UI for adding/removing multiple gifts in CreateAd form\n- Added quantity input controls for each selected gift\n- Maintained backward compatibility with single `giftId` field\n\n**Data Cleanup**\n- Replaced Russian channel names in seed data with English equivalents\n- Standardized all user-facing text to English (excluding UI labels)\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System**\n- **React 18** with TypeScript for type-safe component development\n- **Vite** as the build tool and development server, configured with HMR and custom plugins for Replit integration\n- **Wouter** for lightweight client-side routing instead of React Router\n\n**UI Component Strategy**\n- **shadcn/ui** component library based on Radix UI primitives with Tailwind CSS styling\n- Custom components follow a consistent design system defined in `design_guidelines.md`\n- Dark mode as the primary theme with a carefully crafted color palette using HSL color system\n- Mobile-first responsive design with fixed bottom navigation\n\n**State Management**\n- **TanStack Query (React Query)** for server state management, data fetching, and caching\n- Local component state using React hooks (useState, useEffect)\n- Query client configured with infinite stale time and disabled auto-refetch for optimal mobile performance\n\n**Styling Approach**\n- **Tailwind CSS** with custom configuration extending the base theme\n- CSS custom properties (CSS variables) for theming with HSL color values\n- Custom utility classes for elevation effects (`hover-elevate`, `active-elevate-2`)\n- Component-scoped styles using Tailwind's `@apply` directive where needed\n\n### Backend Architecture\n\n**Server Framework**\n- **Express.js** for HTTP server and REST API routing\n- Middleware-based request/response logging for API endpoints\n- Custom error handling middleware for consistent error responses\n- Session management using `connect-pg-simple` (configured but not actively used in current implementation)\n\n**API Design**\n- RESTful API endpoints under `/api` prefix\n- Standard HTTP methods (GET, POST, PATCH, DELETE) for CRUD operations\n- JSON request/response format\n- Zod schema validation for request payload validation\n\n**Data Layer**\n- **In-memory storage** (MemStorage class) as the current data persistence layer\n- Interface-based storage abstraction (`IStorage`) allows for easy migration to database-backed storage\n- Seed data initialization for NFT items on server startup\n\n### Data Storage\n\n**Current Implementation**\n- **In-memory Map-based storage** for users and NFT items\n- Data persists only during server runtime (resets on restart)\n- Pre-seeded with sample NFT data for demonstration\n\n**Database Configuration (Prepared but Not Active)**\n- **Drizzle ORM** configured for PostgreSQL integration\n- **Neon Database** serverless PostgreSQL adapter installed\n- Schema defined in `shared/schema.ts` with users and nft_items tables\n- Migration system configured via `drizzle.config.ts`\n\n**Schema Design**\n- `users` table: id (UUID), username (unique), password\n- `channels` table: id (UUID), channelName, telegramLink, giftId, price, ownerId, gifts (JSON text)\n- `gifts` table: id, name, image\n- Zod schemas generated from Drizzle tables for runtime validation\n- Multi-gift support via JSON-serialized array in `gifts` field: [{giftId: string, quantity: number}]\n\n### Authentication & Authorization\n\n**Current State**\n- User authentication infrastructure present but not implemented\n- User table schema defined in database schema\n- No active session management or protected routes in current implementation\n\n**Prepared Infrastructure**\n- `connect-pg-simple` session store configured for future PostgreSQL-backed sessions\n- User creation and retrieval methods defined in storage interface\n\n### Design System\n\n**Color Palette**\n- Dark background: HSL(18 8% 12%)\n- Card backgrounds: zinc-900/50 (semi-transparent dark gray)\n- Card borders: zinc-800/50 with hover state zinc-700/70\n- Text colors: zinc-100 (headings), zinc-400 (secondary text), zinc-500 (icons)\n- Search input: bg-zinc-900/30, border-zinc-800/50\n- Price badges: bg-zinc-800/60 with border-zinc-700/50\n\n**Typography**\n- System font stack: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif\n- Font sizes: 11px-16px range with specific weights for hierarchy\n- Consistent spacing using Tailwind's spacing scale (multiples of 4px)\n\n**Component Patterns**\n- Fixed top header with balance display and add button\n- Tab-based navigation with visual active state indicators\n- Filter bar with dropdown and expandable toggle\n- Search bar with icon prefix, themed to match background\n- Grid layout for NFT cards (2 columns on mobile) with hover effects\n- Fixed bottom navigation with three primary sections\n- Multi-gift selector with add/remove controls and quantity inputs\n- Dashed border \"Add Gift\" button for visual clarity\n\n### External Dependencies\n\n**Core Runtime Dependencies**\n- **@tanstack/react-query** (v5.60.5) - Server state management and data fetching\n- **wouter** - Lightweight routing library\n- **zod** - Schema validation and type inference\n- **drizzle-orm** (v0.39.1) - TypeScript ORM for database operations\n- **drizzle-zod** - Zod schema generation from Drizzle tables\n\n**UI Component Libraries**\n- **@radix-ui/react-*** - Headless UI primitives (accordion, dialog, dropdown, tabs, toast, etc.)\n- **class-variance-authority** - Type-safe variant styling\n- **clsx** & **tailwind-merge** - Conditional class name utilities\n- **lucide-react** - Icon library\n- **cmdk** - Command menu component\n- **embla-carousel-react** - Carousel functionality\n\n**Development Tools**\n- **Vite** - Build tool and dev server\n- **TypeScript** - Type checking and compilation\n- **Tailwind CSS** - Utility-first CSS framework\n- **PostCSS** with Autoprefixer - CSS processing\n\n**Database & Storage**\n- **@neondatabase/serverless** (v0.10.4) - Serverless PostgreSQL driver\n- **connect-pg-simple** - PostgreSQL session store\n\n**Build & Deployment**\n- **esbuild** - Server-side bundling for production\n- **tsx** - TypeScript execution for development\n\n**Replit-Specific Integrations**\n- **@replit/vite-plugin-runtime-error-modal** - Error overlay in development\n- **@replit/vite-plugin-cartographer** - Development tooling (dev only)\n- **@replit/vite-plugin-dev-banner** - Development banner (dev only)\n\n### TON Blockchain Integration\n\n**Current Implementation**\n- TON coin logo displayed in price badges and balance header\n- Price values stored as strings to support cryptocurrency precision\n- UI prepared for blockchain wallet integration\n\n**Architecture Decisions**\n- Image-based TON logo display rather than SVG for simplicity\n- String-based price storage to avoid floating-point precision issues\n- Balance display component ready for wallet connection","size_bytes":8005},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 3000,\n    strictPort: true,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1191},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"design_guidelines.md":{"content":"# NFT Marketplace Design Guidelines\n\n## Design Approach\n**Reference-Based**: Exact replication of the provided screenshot design with dark theme and TON blockchain integration.\n\n## Core Design Elements\n\n### Color Palette\n\n**Dark Mode (Primary Theme)**\n- Background: 18 8% 12% (very dark desaturated blue-gray)\n- Card Background: 220 8% 16% (slightly lighter than background)\n- Text Primary: 0 0% 95% (near white)\n- Text Secondary: 210 10% 65% (muted blue-gray)\n- Border/Divider: 220 8% 20% (subtle dark borders)\n- Active Tab: 200 100% 45% (bright cyan blue)\n- Accent/Price: 280 60% 65% (purple-pink gradient feel)\n\n**Card Color Variants** (for NFT item backgrounds)\n- Pink: 340 70% 75%\n- Yellow: 45 90% 70%\n- Blue: 200 65% 70%\n- Purple: 280 60% 75%\n\n### Typography\n\n**Font Stack**: System fonts - -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif\n\n**Hierarchy**:\n- Header Balance/Stats: 14px, weight 600\n- Tab Navigation: 15px, weight 500\n- Filter Labels: 13px, weight 400\n- NFT Card Title: 16px, weight 600\n- NFT Card ID: 12px, weight 400, opacity 70%\n- Price: 15px, weight 600\n\n### Layout System\n\n**Spacing Units**: Tailwind units of 2, 3, 4, 6, and 8 (p-2, m-4, gap-6, etc.)\n\n**Container Structure**:\n- Max width: Full viewport\n- Side padding: 4 units (p-4)\n- Section gaps: 4-6 units\n\n**Grid System**:\n- NFT Cards: 2 columns on mobile, 2 columns layout with gap-3\n- Equal height cards with aspect ratio maintained\n\n### Component Library\n\n**Top Header Bar**\n- Height: 56px\n- Elements: Close button (left), Star count (center-left), TON balance (right)\n- Background: Dark with subtle border-bottom\n- Sticky positioning at top\n\n**Tab Navigation**\n- Three tabs: \"All items\", \"Collections\", \"Bundles\"\n- Active state: Bright cyan underline (3px thick), cyan text color\n- Inactive state: Secondary gray text\n- Bottom border on container\n\n**Filter Bar**\n- Three dropdowns: Collection, Model, Back\n- Dark select elements with right-facing chevron icons\n- Full width on mobile, inline on desktop\n- Height: 40px per select\n- Border radius: 8px\n\n**Search Input**\n- Placeholder: \"Search by ID\"\n- Left-aligned magnifying glass icon\n- Dark background matching filters\n- Border radius: 8px\n- Height: 40px\n\n**NFT Cards**\n- Border radius: 16px\n- Padding: 12px\n- Structure: Image top (rounded 12px), text content below\n- Image aspect ratio: 1:1 (square)\n- Colored background fills entire card\n- Shadow: subtle on hover\n\n**Card Content Layout**:\n- NFT name: Bold, top aligned\n- ID number: Small, gray, below name\n- Price section: Bottom aligned, TON amount + diamond icon\n\n**Bottom Navigation**\n- Fixed at bottom\n- 4 icons: Store, My gifts, Season, Profile\n- Height: 64px\n- Icon size: 24px\n- Active state: Cyan color\n- Background: Same as main background with border-top\n\n### Animations\nNone - static interface focused on content browsing.\n\n### Images\n**NFT Item Images**: Square product images for each NFT (Toy Bear, Input Key, Whip Cupcake, Jolly Chimp) displayed at card top with rounded corners. Images should be crisp, centered, and fill the allocated space.\n\n**Icons**: Use Heroicons for navigation icons (home, gift, calendar, user) and UI elements (search, close, star). No custom SVG generation.","size_bytes":3204},"client/src/components/BottomNav.tsx":{"content":"import { Home, Megaphone, CheckSquare, User } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ntype NavItem = \"store\" | \"myads\" | \"tasks\" | \"profile\";\n\ninterface BottomNavProps {\n  activeTab?: NavItem;\n  onTabChange?: (tab: NavItem) => void;\n}\n\nexport default function BottomNav({ activeTab, onTabChange }: BottomNavProps) {\n  const { t } = useLanguage();\n  \n  const navItems = [\n    { id: \"store\" as NavItem, label: t.nav.store, icon: Home },\n    { id: \"myads\" as NavItem, label: t.nav.myAds, icon: Megaphone },\n    { id: \"tasks\" as NavItem, label: t.nav.tasks, icon: CheckSquare },\n    { id: \"profile\" as NavItem, label: t.nav.profile, icon: User },\n  ];\n\n  const handleClick = (id: NavItem) => {\n    onTabChange?.(id);\n    console.log(`Navigation: ${id}`);\n  };\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-background/95 backdrop-blur-sm border-t border-border z-50 safe-area-bottom\">\n      <div className=\"flex items-center justify-around h-[72px] sm:h-20 px-1 sm:px-2 pb-1.5 sm:pb-2\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = activeTab === item.id;\n\n          return (\n            <button\n              key={item.id}\n              onClick={() => handleClick(item.id)}\n              className={`flex flex-col items-center justify-center gap-1.5 sm:gap-2 flex-1 h-full transition-all duration-200 rounded-lg mx-0.5 sm:mx-1 ${\n                isActive ? \"bg-primary/10\" : \"hover:bg-muted/50\"\n              }`}\n              data-testid={`button-nav-${item.id}`}\n            >\n              <Icon\n                className={`w-6 h-6 sm:w-7 sm:h-7 transition-colors ${\n                  isActive ? \"text-primary\" : \"text-muted-foreground\"\n                }`}\n              />\n              <span\n                className={`text-[10px] sm:text-xs font-medium transition-colors ${\n                  isActive ? \"text-primary\" : \"text-muted-foreground\"\n                }`}\n              >\n                {item.label}\n              </span>\n            </button>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}","size_bytes":2153},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/pages/CreateAd.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, Plus, X, CheckCircle, AlertCircle, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport tonLogo from \"@assets/toncoin_1760893904370.png\";\nimport GiftPickerModal from \"@/components/GiftPickerModal\";\n\ninterface Gift {\n  id: string;\n  name: string;\n  image: string;\n}\n\ninterface SelectedGift {\n  giftId: string;\n  quantity: number;\n}\n\nexport default function CreateAd() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { t } = useLanguage();\n  const [isGiftPickerOpen, setIsGiftPickerOpen] = useState(false);\n  \n  const [formData, setFormData] = useState({\n    telegramLink: \"\",\n    price: \"\",\n  });\n\n  const [selectedGifts, setSelectedGifts] = useState<SelectedGift[]>([]);\n  const [telegramVerification, setTelegramVerification] = useState<{\n    isVerifying: boolean;\n    isVerified: boolean;\n    hasGift: boolean;\n    message: string;\n  }>({\n    isVerifying: false,\n    isVerified: false,\n    hasGift: false,\n    message: \"\"\n  });\n\n  const { data: gifts = [] } = useQuery<Gift[]>({\n    queryKey: [\"/api/gifts\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/gifts\");\n      return res.json();\n    },\n  });\n\n  const createChannelMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const res = await apiRequest(\"POST\", \"/api/channels\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/channels\"] });\n      toast({\n        title: t.toast.success,\n        description: t.toast.channelCreated,\n      });\n      navigate(\"/\");\n    },\n    onError: () => {\n      toast({\n        title: t.toast.error,\n        description: t.toast.failedToCreate,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.telegramLink || selectedGifts.length === 0 || !formData.price) {\n      toast({\n        title: t.toast.error,\n        description: t.toast.fillAllFields,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!telegramVerification.isVerified) {\n      toast({\n        title: t.toast.warning,\n        description: t.toast.verificationRequired,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Extract channel name from telegram link\n    const channelMatch = formData.telegramLink.match(/t\\.me\\/([a-zA-Z0-9_]+)/);\n    const channelName = channelMatch ? channelMatch[1] : \"Unknown Channel\";\n\n    const submitData = {\n      ...formData,\n      channelName,\n      giftId: selectedGifts[0].giftId,\n      gifts: JSON.stringify(selectedGifts),\n    };\n\n    createChannelMutation.mutate(submitData);\n  };\n\n  const addGift = (giftId: string) => {\n    if (selectedGifts.find(g => g.giftId === giftId)) {\n      toast({\n        title: t.toast.warning,\n        description: t.toast.giftAlreadyAdded,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setSelectedGifts([...selectedGifts, { giftId, quantity: 1 }]);\n    setIsGiftPickerOpen(false);\n  };\n\n  const removeGift = (giftId: string) => {\n    setSelectedGifts(selectedGifts.filter(g => g.giftId !== giftId));\n  };\n\n  const updateQuantity = (giftId: string, quantity: number) => {\n    if (quantity < 1) return;\n    setSelectedGifts(selectedGifts.map(g => \n      g.giftId === giftId ? { ...g, quantity } : g\n    ));\n  };\n\n  const verifyTelegramChannel = async () => {\n    if (!formData.telegramLink || selectedGifts.length === 0) {\n      toast({\n        title: t.toast.warning,\n        description: t.toast.enterTelegramLink,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setTelegramVerification(prev => ({ ...prev, isVerifying: true }));\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/verify-telegram\", {\n        telegramLink: formData.telegramLink,\n        giftName: selectedGifts[0].giftId // Use first selected gift\n      });\n      \n      const result = await response.json();\n      \n      setTelegramVerification({\n        isVerifying: false,\n        isVerified: result.channelValid,\n        hasGift: result.hasGift,\n        message: result.message\n      });\n\n      toast({\n        title: result.channelValid ? t.toast.channelVerified : t.toast.verificationFailed,\n        description: result.message,\n        variant: result.channelValid ? \"default\" : \"destructive\",\n      });\n    } catch (error) {\n      setTelegramVerification(prev => ({ ...prev, isVerifying: false }));\n      toast({\n        title: t.toast.error,\n        description: t.toast.failedToVerify,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"h-screen bg-background text-foreground flex flex-col overflow-hidden\">\n      <header className=\"sticky top-0 z-50 flex items-center gap-3 px-4 py-3 bg-background border-b border-border flex-shrink-0\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"hover-elevate\"\n          onClick={() => navigate(\"/\")}\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"w-5 h-5\" />\n        </Button>\n        <h1 className=\"text-lg font-semibold\">{t.createAd.title}</h1>\n      </header>\n\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"px-4 py-6\">\n        <div className=\"bg-blue-500/10 border border-blue-500/30 rounded-xl p-4 mb-6\">\n          <h3 className=\"text-sm font-semibold text-blue-400 mb-3\">{t.createAd.importantInfo}</h3>\n          <div className=\"space-y-2 text-xs text-blue-200/80\">\n            <p className=\"font-medium\">{t.createAd.beforeAdding}</p>\n            <ol className=\"list-decimal list-inside space-y-1 ml-2\">\n              <li>{t.createAd.step1}</li>\n              <li>{t.createAd.step2}</li>\n            </ol>\n            <p className=\"font-medium mt-3\">{t.createAd.makeSure}</p>\n            <ul className=\"list-disc list-inside space-y-1 ml-2\">\n              <li>{t.createAd.cloudPassword}</li>\n              <li>{t.createAd.sessionActive}</li>\n              <li>{t.createAd.giftsNotHidden}</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"px-4 space-y-6 pb-6\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"telegramLink\" className=\"text-sm font-medium text-foreground\">\n            {t.createAd.telegramLink} *\n          </Label>\n          <div className=\"flex gap-2\">\n            <Input\n              id=\"telegramLink\"\n              value={formData.telegramLink}\n              onChange={(e) => setFormData({ ...formData, telegramLink: e.target.value })}\n              placeholder=\"https://t.me/your_channel\"\n              className=\"bg-card border-card-border text-foreground flex-1\"\n              data-testid=\"input-telegram-link\"\n            />\n            <Button\n              type=\"button\"\n              onClick={verifyTelegramChannel}\n              disabled={telegramVerification.isVerifying}\n              className=\"px-4 bg-primary hover:bg-primary/90 whitespace-nowrap\"\n            >\n              {telegramVerification.isVerifying ? (\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n              ) : (\n                t.createAd.verify\n              )}\n            </Button>\n          </div>\n          \n          {/* Verification Status */}\n          {telegramVerification.message && (\n            <div className={`flex items-center gap-2 p-3 rounded-lg ${\n              telegramVerification.isVerified \n                ? 'bg-green-500/10 border border-green-500/20' \n                : 'bg-red-500/10 border border-red-500/20'\n            }`}>\n              {telegramVerification.isVerified ? (\n                <CheckCircle className=\"w-5 h-5 text-green-500\" />\n              ) : (\n                <AlertCircle className=\"w-5 h-5 text-red-500\" />\n              )}\n              <span className={`text-sm ${\n                telegramVerification.isVerified ? 'text-green-600' : 'text-red-600'\n              }`}>\n                {telegramVerification.message}\n              </span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"space-y-3\">\n          <Label className=\"text-sm font-medium text-foreground\">\n            {t.createAd.gifts} *\n          </Label>\n          \n          {selectedGifts.map((selected) => {\n            const gift = gifts.find(g => g.id === selected.giftId);\n            if (!gift) return null;\n            \n            return (\n              <div \n                key={selected.giftId}\n                className=\"flex items-center gap-3 p-3 bg-zinc-900/30 border border-zinc-800/50 rounded-lg\"\n              >\n                <div className=\"w-12 h-12 rounded-lg overflow-hidden bg-white flex-shrink-0\">\n                  <img\n                    src={gift.image}\n                    alt={gift.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-foreground truncate\">{gift.name}</p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Label htmlFor={`quantity-${gift.id}`} className=\"text-xs text-zinc-400 whitespace-nowrap\">\n                    Qty:\n                  </Label>\n                  <Input\n                    id={`quantity-${gift.id}`}\n                    type=\"number\"\n                    min=\"1\"\n                    value={selected.quantity}\n                    onChange={(e) => updateQuantity(selected.giftId, parseInt(e.target.value) || 1)}\n                    className=\"w-16 h-8 text-center bg-zinc-800/50 border-zinc-700/50 text-sm\"\n                  />\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-8 w-8 text-zinc-400 hover:text-red-400 hover:bg-red-500/10 flex-shrink-0\"\n                  onClick={() => removeGift(selected.giftId)}\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            );\n          })}\n\n          <button\n            type=\"button\"\n            onClick={() => setIsGiftPickerOpen(true)}\n            className=\"w-full flex items-center justify-center gap-2 p-4 bg-zinc-900/30 border border-zinc-800/50 border-dashed rounded-lg hover:bg-zinc-900/50 hover:border-zinc-700/70 transition-all text-zinc-400 hover:text-zinc-300\"\n            data-testid=\"button-add-gift\"\n          >\n            <Plus className=\"w-5 h-5\" />\n            <span>{t.createAd.addGift}</span>\n          </button>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"price\" className=\"text-sm font-medium text-foreground\">\n            {t.createAd.price} *\n          </Label>\n          <div className=\"relative\">\n            <Input\n              id=\"price\"\n              type=\"number\"\n              step=\"0.01\"\n              value={formData.price}\n              onChange={(e) => setFormData({ ...formData, price: e.target.value })}\n              placeholder=\"0.00\"\n              className=\"bg-card border-card-border text-foreground pr-20\"\n              data-testid=\"input-price\"\n            />\n            <div className=\"absolute right-3 top-1/2 -translate-y-1/2 flex items-center gap-1.5\">\n              <img src={tonLogo} alt=\"TON\" className=\"w-4 h-4 rounded-full object-cover\" />\n              <span className=\"text-sm text-muted-foreground\">TON</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex gap-3 pt-4\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            className=\"flex-1\"\n            onClick={() => navigate(\"/\")}\n            data-testid=\"button-cancel\"\n          >\n            {t.createAd.cancel}\n          </Button>\n          <Button\n            type=\"submit\"\n            className=\"flex-1 bg-primary hover-elevate active-elevate-2\"\n            disabled={createChannelMutation.isPending || !telegramVerification.isVerified}\n            data-testid=\"button-submit\"\n          >\n            {createChannelMutation.isPending ? t.createAd.creating : \n             !telegramVerification.isVerified ? t.createAd.verifyFirst : t.createAd.create}\n          </Button>\n        </div>\n      </form>\n\n      <GiftPickerModal\n          open={isGiftPickerOpen}\n          onClose={() => setIsGiftPickerOpen(false)}\n          gifts={gifts}\n          selectedGiftIds={selectedGifts.map(g => g.giftId)}\n          onSelectGifts={(giftIds) => {\n            setSelectedGifts(giftIds.map(id => ({ giftId: id, quantity: 1 })));\n            setIsGiftPickerOpen(false);\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":13162},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertChannelSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Telegram Bot API Token\nconst BOT_TOKEN = \"8240745182:AAE5sF_HosDMHafZbWgF5cgTPx4Oq_wh-_c\";\n\n// Telegram verification functions\nasync function verifyTelegramChannel(telegramLink: string): Promise<boolean> {\n  try {\n    // Extract channel username from link\n    const channelMatch = telegramLink.match(/t\\.me\\/([a-zA-Z0-9_]+)/);\n    if (!channelMatch) {\n      return false;\n    }\n    \n    const channelUsername = channelMatch[1];\n    \n    // Use Telegram Bot API to check if channel exists and bot is admin\n    const response = await fetch(\n      `https://api.telegram.org/bot${BOT_TOKEN}/getChat?chat_id=@${channelUsername}`\n    );\n    \n    const data = await response.json();\n    \n    if (!data.ok) {\n      console.error('Telegram API error:', data.description);\n      return false;\n    }\n    \n    // Check if bot is an administrator\n    const adminsResponse = await fetch(\n      `https://api.telegram.org/bot${BOT_TOKEN}/getChatAdministrators?chat_id=@${channelUsername}`\n    );\n    \n    const adminsData = await adminsResponse.json();\n    \n    if (!adminsData.ok) {\n      return false;\n    }\n    \n    // Check if our bot is in the administrators list\n    const botId = BOT_TOKEN.split(':')[0];\n    const isBotAdmin = adminsData.result.some((admin: any) => admin.user.id.toString() === botId);\n    \n    return isBotAdmin;\n  } catch (error) {\n    console.error('Error verifying Telegram channel:', error);\n    return false;\n  }\n}\n\nasync function checkGiftInChannel(telegramLink: string, giftName: string): Promise<boolean> {\n  try {\n    // Extract channel username from link\n    const channelMatch = telegramLink.match(/t\\.me\\/([a-zA-Z0-9_]+)/);\n    if (!channelMatch) {\n      return false;\n    }\n    \n    const channelUsername = channelMatch[1];\n    \n    // Get recent messages from the channel\n    const response = await fetch(\n      `https://api.telegram.org/bot${BOT_TOKEN}/getUpdates?chat_id=@${channelUsername}&limit=100`\n    );\n    \n    const data = await response.json();\n    \n    if (!data.ok) {\n      console.error('Failed to get channel messages:', data.description);\n      return false;\n    }\n    \n    // Search for gift name in recent messages\n    const messages = data.result || [];\n    const hasGift = messages.some((update: any) => {\n      const message = update.message || update.channel_post;\n      if (!message) return false;\n      \n      const text = message.text || message.caption || '';\n      return text.toLowerCase().includes(giftName.toLowerCase());\n    });\n    \n    return hasGift;\n  } catch (error) {\n    console.error('Error checking gift in channel:', error);\n    return false;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Serve TON Connect manifest\n  app.get('/tonconnect-manifest.json', (_req, res) => {\n    res.json({\n      url: \"https://4a6a4d09-c68b-481c-9974-30fc162da62a-00-35hnxvckxlwnb.riker.replit.dev\",\n      name: \"TON Gift App\",\n      iconUrl: \"https://4a6a4d09-c68b-481c-9974-30fc162da62a-00-35hnxvckxlwnb.riker.replit.dev/icon.png\"\n    });\n  });\n\n  // Serve icon\n  app.get('/icon.png', (_req, res) => {\n    res.sendFile('public/icon.png', { root: '.' });\n  });\n\n  app.get(\"/api/gifts\", async (req, res) => {\n    try {\n      const gifts = await storage.getAllGifts();\n      res.json(gifts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch gifts\" });\n    }\n  });\n\n  app.get(\"/api/gifts/:id\", async (req, res) => {\n    try {\n      const gift = await storage.getGiftById(req.params.id);\n      if (!gift) {\n        return res.status(404).json({ error: \"Gift not found\" });\n      }\n      res.json(gift);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch gift\" });\n    }\n  });\n\n  app.get(\"/api/channels\", async (req, res) => {\n    try {\n      const { search } = req.query;\n      \n      if (search && typeof search === 'string') {\n        const channels = await storage.searchChannelsByGiftName(search);\n        return res.json(channels);\n      }\n      \n      const channels = await storage.getAllChannels();\n      res.json(channels);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch channels\" });\n    }\n  });\n\n  app.get(\"/api/channels/:id\", async (req, res) => {\n    try {\n      const channel = await storage.getChannelById(req.params.id);\n      if (!channel) {\n        return res.status(404).json({ error: \"Channel not found\" });\n      }\n      res.json(channel);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch channel\" });\n    }\n  });\n\n  app.post(\"/api/channels\", async (req, res) => {\n    try {\n      const validatedData = insertChannelSchema.parse(req.body);\n      const channel = await storage.createChannel(validatedData);\n      res.status(201).json(channel);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid channel data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create channel\" });\n    }\n  });\n\n  app.patch(\"/api/channels/:id\", async (req, res) => {\n    try {\n      const updates = insertChannelSchema.partial().parse(req.body);\n      const channel = await storage.updateChannel(req.params.id, updates);\n      if (!channel) {\n        return res.status(404).json({ error: \"Channel not found\" });\n      }\n      res.json(channel);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid channel data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update channel\" });\n    }\n  });\n\n  app.delete(\"/api/channels/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteChannel(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Channel not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete channel\" });\n    }\n  });\n\n  // New endpoint to verify Telegram channel and check for gifts\n  app.post(\"/api/verify-telegram\", async (req, res) => {\n    try {\n      const { telegramLink, giftName } = req.body;\n      \n      if (!telegramLink || !giftName) {\n        return res.status(400).json({ error: \"Telegram link and gift name are required\" });\n      }\n\n      // Simulate Telegram API check\n      // In real implementation, you would use Telegram Bot API or web scraping\n      const isChannelValid = await verifyTelegramChannel(telegramLink);\n      const hasGift = await checkGiftInChannel(telegramLink, giftName);\n      \n      res.json({\n        channelValid: isChannelValid,\n        hasGift: hasGift,\n        message: isChannelValid \n          ? (hasGift ? \"Gift found in channel\" : \"Gift not found in channel\")\n          : \"Invalid Telegram channel\"\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to verify Telegram channel\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7158},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/pages/MyAds.tsx":{"content":"import { Plus, Layers3, Trash2 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport TopHeader from \"@/components/TopHeader\";\nimport BottomNav from \"@/components/BottomNav\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport tonLogo from \"@assets/toncoin_1760893904370.png\";\n\ninterface Channel {\n  id: string;\n  channelName: string;\n  telegramLink: string;\n  giftId: string;\n  giftName: string;\n  giftImage: string;\n  price: string;\n  ownerId: string | null;\n}\n\nexport default function MyAds() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { t } = useLanguage();\n\n  const { data: channels, isLoading } = useQuery<Channel[]>({\n    queryKey: [\"/api/channels\"],\n  });\n\n  const deleteChannelMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/channels/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/channels\"] });\n      toast({\n        title: t.toast.success,\n        description: t.toast.channelDeleted,\n      });\n    },\n    onError: () => {\n      toast({\n        title: t.toast.error,\n        description: t.toast.failedToDelete,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (id: string, name: string) => {\n    if (confirm(t.myAds.deleteConfirm(name))) {\n      deleteChannelMutation.mutate(id);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground flex flex-col\">\n      <TopHeader />\n      \n      <div className=\"flex-1 flex flex-col\">\n        <div className=\"flex items-center justify-between px-4 py-4 border-b border-border\">\n          <h1 className=\"text-xl font-semibold text-foreground\" data-testid=\"text-title\">\n            {t.myAds.title}\n          </h1>\n          <Button\n            size=\"icon\"\n            className=\"w-10 h-10 rounded-lg bg-primary hover-elevate active-elevate-2\"\n            data-testid=\"button-add-ad\"\n            onClick={() => navigate(\"/create-ad\")}\n          >\n            <Plus className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        {isLoading ? (\n          <div className=\"px-4 py-6\">\n            <div className=\"grid grid-cols-2 gap-3\">\n              {[1, 2].map((i) => (\n                <div key={i} className=\"rounded-2xl p-3 bg-card animate-pulse\">\n                  <div className=\"aspect-square rounded-xl bg-muted mb-3\" />\n                  <div className=\"h-4 bg-muted rounded mb-2\" />\n                  <div className=\"h-3 bg-muted rounded w-2/3\" />\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : !channels || channels.length === 0 ? (\n          <div className=\"flex-1 flex flex-col items-center justify-center px-6 pb-24\">\n            <div className=\"flex flex-col items-center text-center space-y-6\">\n              <div className=\"w-24 h-24 rounded-2xl bg-card border border-card-border flex items-center justify-center\">\n                <Layers3 className=\"w-12 h-12 text-muted-foreground\" />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <h2 className=\"text-xl font-semibold text-foreground\" data-testid=\"text-empty-title\">\n                  {t.myAds.noChannels}\n                </h2>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-empty-subtitle\">\n                  {t.myAds.createFirst}\n                </p>\n              </div>\n\n            </div>\n          </div>\n        ) : (\n          <div className=\"px-4 py-6 pb-24\">\n            <div className=\"grid grid-cols-2 gap-3\">\n              {channels.map((channel) => {\n                return (\n                  <div\n                    key={channel.id}\n                    className=\"rounded-2xl p-3 relative bg-gradient-to-br from-[#4A90E2] to-[#357ABD]\"\n                    data-testid={`card-channel-${channel.id}`}\n                  >\n                    <button\n                      onClick={() => handleDelete(channel.id, channel.channelName)}\n                      className=\"absolute top-2 right-2 w-8 h-8 rounded-lg bg-black/30 backdrop-blur-sm flex items-center justify-center hover:bg-black/50 transition-colors z-10\"\n                      data-testid={`button-delete-${channel.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4 text-white\" />\n                    </button>\n\n                    <div className=\"relative aspect-square rounded-xl overflow-hidden mb-3\">\n                      <img\n                        src={channel.giftImage}\n                        alt={channel.giftName}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <h3 className=\"text-base font-semibold text-white\">\n                        {channel.giftName}\n                      </h3>\n                      <p className=\"text-xs text-white/70\">\n                        {channel.channelName}\n                      </p>\n                    </div>\n\n                    <div className=\"flex items-center gap-1.5 px-3 py-1.5 bg-primary rounded-full mt-3 w-fit\">\n                      <img src={tonLogo} alt=\"TON\" className=\"w-3.5 h-3.5 rounded-full object-cover\" />\n                      <span className=\"text-sm font-semibold text-primary-foreground\">\n                        {channel.price} TON\n                      </span>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n\n      <BottomNav activeTab=\"myads\" />\n    </div>\n  );\n}\n","size_bytes":5862},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/NFTGrid.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport NFTCard from \"./NFTCard\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface Channel {\n  id: string;\n  channelName: string;\n  telegramLink: string;\n  giftId: string;\n  giftName: string;\n  giftImage: string;\n  price: string;\n  ownerId: string | null;\n}\n\ninterface NFTGridProps {\n  searchQuery?: string;\n  giftFilter?: string[];\n}\n\nexport default function NFTGrid({ searchQuery = \"\", giftFilter = [] }: NFTGridProps) {\n  const { t } = useLanguage();\n  const { data: channels, isLoading } = useQuery<Channel[]>({\n    queryKey: searchQuery ? [\"/api/channels\", { search: searchQuery }] : [\"/api/channels\"],\n    queryFn: async ({ queryKey }) => {\n      const [url, params] = queryKey as [string, { search?: string } | undefined];\n      const searchParam = params?.search ? `?search=${encodeURIComponent(params.search)}` : '';\n      const response = await fetch(`${url}${searchParam}`);\n      return response.json();\n    },\n  });\n\n  const filteredChannels = (channels || []).filter(channel => {\n    if (!giftFilter || giftFilter.length === 0) return true;\n    return giftFilter.includes(channel.giftId);\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"px-3 sm:px-4 pb-24 pt-2\">\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3 sm:gap-4\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <div\n              key={i}\n              className=\"rounded-2xl p-3 sm:p-4 bg-card animate-pulse border border-card-border\"\n            >\n              <div className=\"aspect-square rounded-xl bg-muted mb-3 sm:mb-4\" />\n              <div className=\"h-4 bg-muted rounded mb-2\" />\n              <div className=\"h-3 bg-muted rounded w-2/3 mb-3 sm:mb-4\" />\n              <div className=\"flex justify-between items-center\">\n                <div className=\"h-6 bg-muted rounded-full w-16\" />\n                <div className=\"h-8 bg-muted rounded-lg w-8\" />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (filteredChannels.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center px-6 py-20 text-center\">\n        <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n          <span className=\"text-2xl\">🎁</span>\n        </div>\n        <p className=\"text-muted-foreground text-sm\">{t.home.noGifts}</p>\n        <p className=\"text-muted-foreground text-xs mt-1\">{t.home.tryChangingFilter}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"px-3 sm:px-4 pb-24 pt-2\">\n      <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3 sm:gap-4\">\n        {filteredChannels.map((channel) => {\n          return (\n            <NFTCard\n              key={channel.id}\n              giftName={channel.giftName}\n              channelName={channel.channelName}\n              price={channel.price}\n              image={channel.giftImage}\n              locked={false}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3090},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/TopHeader.tsx":{"content":"import { Plus, Minus, Wallet } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport tonLogo from \"@assets/toncoin_1760893904370.png\";\nimport { useTelegramUser } from \"@/hooks/use-telegram-user\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState, useEffect } from \"react\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTonConnectUI, useTonAddress, useTonWallet } from '@tonconnect/ui-react';\n\nexport default function TopHeader() {\n  const { username, avatarLetter } = useTelegramUser();\n  const { language, t } = useLanguage();\n  const { toast } = useToast();\n  const [tonConnectUI] = useTonConnectUI();\n  const userFriendlyAddress = useTonAddress();\n  const wallet = useTonWallet();\n  const [isDepositOpen, setIsDepositOpen] = useState(false);\n  const [isWithdrawOpen, setIsWithdrawOpen] = useState(false);\n  const [depositAmount, setDepositAmount] = useState(\"\");\n  const [withdrawAmount, setWithdrawAmount] = useState(\"\");\n  const [promoCode, setPromoCode] = useState(\"\");\n  const [balance, setBalance] = useState(0);\n  const [depositAddress] = useState(\"UQAb0o8lRX_dZvl2NL6pInxbSjixvdrCf_G4KdqYRCgIjDz1\");\n\n  useEffect(() => {\n    const savedBalance = localStorage.getItem('userBalance');\n    if (savedBalance) {\n      setBalance(parseFloat(savedBalance));\n    }\n  }, []);\n\n  const handleDeposit = async () => {\n    if (!wallet) {\n      toast({\n        title: t.toast.error,\n        description: language === 'ru' ? \"Подключите кошелёк TON\" : \"Connect TON wallet first\",\n        variant: \"destructive\",\n      });\n      tonConnectUI.openModal();\n      return;\n    }\n\n    const amount = parseFloat(depositAmount);\n    if (!amount || amount < 0.05) {\n      toast({\n        title: t.toast.error,\n        description: language === 'ru' ? \"Минимальная сумма депозита: 0.05 TON\" : \"Minimum deposit: 0.05 TON\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    let finalAmount = amount;\n    let bonusApplied = false;\n    if (promoCode.trim().toUpperCase() === \"GIFT\") {\n      finalAmount = amount * 1.15;\n      bonusApplied = true;\n    }\n\n    const amountInNanotons = Math.floor(amount * 1_000_000_000).toString();\n\n    const transaction = {\n      validUntil: Math.floor(Date.now() / 1000) + 360,\n      messages: [\n        {\n          address: depositAddress,\n          amount: amountInNanotons,\n        }\n      ]\n    };\n\n    try {\n      const result = await tonConnectUI.sendTransaction(transaction);\n      console.log('Transaction sent:', result);\n\n      const newBalance = balance + finalAmount;\n      setBalance(newBalance);\n      localStorage.setItem('userBalance', newBalance.toString());\n\n      if (bonusApplied) {\n        toast({\n          title: t.toast.success,\n          description: `${amount} TON + 15% ${language === 'ru' ? 'бонус' : 'bonus'} = ${finalAmount.toFixed(2)} TON`,\n        });\n      } else {\n        toast({\n          title: t.toast.success,\n          description: `${language === 'ru' ? 'Депозит успешно отправлен' : 'Deposit sent successfully'}: ${amount} TON`,\n        });\n      }\n\n      setIsDepositOpen(false);\n      setDepositAmount(\"\");\n      setPromoCode(\"\");\n    } catch (error) {\n      console.error('Transaction failed:', error);\n      toast({\n        title: t.toast.error,\n        description: language === 'ru' ? \"Транзакция отменена или не удалась\" : \"Transaction cancelled or failed\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleWithdraw = () => {\n    const amount = parseFloat(withdrawAmount);\n    if (!amount || amount < 0.05) {\n      toast({\n        title: t.toast.error,\n        description: language === 'ru' ? \"Минимальная сумма вывода: 0.05 TON\" : \"Minimum withdrawal: 0.05 TON\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    toast({\n      title: t.profile.suspiciousActivity,\n      description: t.profile.withdrawalBlocked,\n      variant: \"destructive\",\n    });\n    setIsWithdrawOpen(false);\n    setWithdrawAmount(\"\");\n  };\n\n  return (\n    <>\n      <header className=\"sticky top-0 z-50 flex items-center justify-between px-3 sm:px-4 py-3 sm:py-4 bg-background/95 backdrop-blur-sm\">\n        <div className=\"flex items-center gap-2 sm:gap-3\" data-testid=\"text-title\">\n          <div className=\"w-8 h-8 sm:w-9 sm:h-9 rounded-full bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center\">\n            <span className=\"text-sm sm:text-base font-bold text-white\">{avatarLetter}</span>\n          </div>\n          <span className=\"text-base sm:text-lg font-semibold text-foreground\">{username}</span>\n        </div>\n\n        <div className=\"flex items-center gap-2 sm:gap-3\">\n          {!wallet ? (\n            <Button\n              size=\"sm\"\n              onClick={() => tonConnectUI.openModal()}\n              className=\"px-3 py-2 h-9 rounded-full bg-blue-600 hover:bg-blue-700 text-sm font-semibold gap-1.5 shadow-lg\"\n              data-testid=\"button-connect-wallet\"\n            >\n              <Wallet className=\"w-4 h-4\" />\n              <span>{language === 'ru' ? 'Підключити' : 'Connect Wallet'}</span>\n            </Button>\n          ) : (\n            <>\n              <div className=\"flex items-center gap-1.5 sm:gap-2 px-2.5 sm:px-4 py-1.5 sm:py-2 rounded-full bg-primary/10 border border-primary/20\" data-testid=\"display-balance\">\n                <img src={tonLogo} alt=\"TON\" className=\"w-5 h-5 sm:w-6 sm:h-6 rounded-full object-cover\" />\n                <span className=\"text-xs sm:text-sm font-semibold text-foreground\">{balance.toFixed(2)} TON</span>\n              </div>\n              <Button\n                size=\"icon\"\n                className=\"w-8 h-8 sm:w-9 sm:h-9 rounded-full bg-green-600 hover:bg-green-700 active-elevate-2 shadow-md\"\n                data-testid=\"button-deposit\"\n                onClick={() => setIsDepositOpen(true)}\n              >\n                <Plus className=\"w-4 h-4 text-white\" />\n              </Button>\n              <Button\n                size=\"icon\"\n                className=\"w-8 h-8 sm:w-9 sm:h-9 rounded-full bg-red-600 hover:bg-red-700 active-elevate-2 shadow-md\"\n                data-testid=\"button-withdraw\"\n                onClick={() => setIsWithdrawOpen(true)}\n              >\n                <Minus className=\"w-4 h-4 text-white\" />\n              </Button>\n            </>\n          )}\n        </div>\n      </header>\n\n      <Dialog open={isDepositOpen} onOpenChange={(open) => { if (open) setIsDepositOpen(true); }}>\n        <DialogContent className=\"bg-gradient-to-b from-background to-muted/20 border border-green-500/20 rounded-[2rem] p-5 overflow-hidden max-w-[340px] shadow-2xl shadow-green-500/10\" onInteractOutside={(e) => e.preventDefault()}>\n          <div className=\"relative\">\n            <div className=\"absolute top-4 right-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => {\n                  setIsDepositOpen(false);\n                  setDepositAmount(\"\");\n                  setPromoCode(\"\");\n                }}\n                className=\"w-8 h-8 rounded-full hover:bg-muted/50\"\n              >\n                <span className=\"text-muted-foreground text-lg\">×</span>\n              </Button>\n            </div>\n\n            <div className=\"text-center mb-4\">\n              <div className=\"w-11 h-11 mx-auto mb-2 rounded-full bg-gradient-to-br from-green-500 to-emerald-500 flex items-center justify-center shadow-lg shadow-green-500/30\">\n                <Plus className=\"w-5 h-5 text-white\" />\n              </div>\n              <DialogTitle className=\"text-foreground text-base font-bold mb-0.5\">{t.profile.depositTitle}</DialogTitle>\n              <p className=\"text-muted-foreground text-xs\">{language === 'ru' ? 'Мінімум 0.05 TON' : 'Minimum 0.05 TON'}</p>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"relative group\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-green-500/20 to-emerald-500/20 rounded-2xl blur-xl group-hover:blur-2xl transition-all duration-300\"></div>\n                <div className=\"relative bg-card/80 backdrop-blur-sm border border-green-500/30 rounded-2xl p-4 transition-all duration-300 group-hover:border-green-500/50\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <span className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                      {language === 'ru' ? 'Сума' : 'Amount'}\n                    </span>\n                    <div className=\"flex items-center gap-2\">\n                      <img src={tonLogo} alt=\"TON\" className=\"w-5 h-5 rounded-full\" />\n                      <span className=\"text-xs font-semibold text-foreground\">TON</span>\n                    </div>\n                  </div>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0.05\"\n                    value={depositAmount}\n                    onChange={(e) => setDepositAmount(e.target.value)}\n                    placeholder=\"0.00\"\n                    className=\"h-14 text-4xl font-bold text-center border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 p-0\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  value={promoCode}\n                  onChange={(e) => setPromoCode(e.target.value.toUpperCase())}\n                  placeholder={language === 'ru' ? 'Промокод' : 'Promo code'}\n                  className=\"h-14 bg-card/50 backdrop-blur-sm border border-border/50 focus-visible:ring-2 focus-visible:ring-green-500/50 focus-visible:border-green-500/50 rounded-2xl text-center uppercase font-medium tracking-wider placeholder:text-muted-foreground/50\"\n                />\n                {promoCode.toUpperCase() === \"GIFT\" && (\n                  <div className=\"absolute -bottom-2 left-1/2 -translate-x-1/2 bg-green-500 text-white text-xs font-bold px-3 py-1 rounded-full shadow-lg animate-in fade-in slide-in-from-top-2 duration-300\">\n                    +15% бонус\n                  </div>\n                )}\n              </div>\n\n              <Button\n                onClick={handleDeposit}\n                className=\"w-full h-12 rounded-2xl bg-gradient-to-r from-green-600 via-green-500 to-emerald-500 hover:from-green-700 hover:via-green-600 hover:to-emerald-600 shadow-lg shadow-green-500/30 text-white font-bold text-sm transition-all duration-300 hover:shadow-xl hover:shadow-green-500/40 hover:scale-[1.02] active:scale-[0.98]\"\n              >\n                {wallet ? t.profile.confirm : (language === 'ru' ? 'Підключити гаманець' : 'Connect Wallet')}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isWithdrawOpen} onOpenChange={(open) => { if (open) setIsWithdrawOpen(true); }}>\n        <DialogContent className=\"bg-gradient-to-b from-background to-muted/20 border border-red-500/20 rounded-[2rem] p-5 overflow-hidden max-w-[340px] shadow-2xl shadow-red-500/10\" onInteractOutside={(e) => e.preventDefault()}>\n          <div className=\"relative\">\n            <div className=\"absolute top-4 right-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => {\n                  setIsWithdrawOpen(false);\n                  setWithdrawAmount(\"\");\n                }}\n                className=\"w-8 h-8 rounded-full hover:bg-muted/50\"\n              >\n                <span className=\"text-muted-foreground text-lg\">×</span>\n              </Button>\n            </div>\n\n            <div className=\"text-center mb-4\">\n              <div className=\"w-11 h-11 mx-auto mb-2 rounded-full bg-gradient-to-br from-red-500 to-orange-500 flex items-center justify-center shadow-lg shadow-red-500/30\">\n                <Minus className=\"w-5 h-5 text-white\" />\n              </div>\n              <DialogTitle className=\"text-foreground text-base font-bold mb-0.5\">{t.profile.withdrawTitle}</DialogTitle>\n              <p className=\"text-muted-foreground text-xs\">\n                {language === 'ru' ? 'Доступно: ' : 'Available: '}\n                <span className=\"font-semibold text-foreground\">{balance.toFixed(2)} TON</span>\n              </p>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"relative group\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-red-500/20 to-orange-500/20 rounded-2xl blur-xl group-hover:blur-2xl transition-all duration-300\"></div>\n                <div className=\"relative bg-card/80 backdrop-blur-sm border border-red-500/30 rounded-2xl p-4 transition-all duration-300 group-hover:border-red-500/50\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <span className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                      {language === 'ru' ? 'Сума' : 'Amount'}\n                    </span>\n                    <div className=\"flex items-center gap-2\">\n                      <img src={tonLogo} alt=\"TON\" className=\"w-5 h-5 rounded-full\" />\n                      <span className=\"text-xs font-semibold text-foreground\">TON</span>\n                    </div>\n                  </div>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0.05\"\n                    value={withdrawAmount}\n                    onChange={(e) => setWithdrawAmount(e.target.value)}\n                    placeholder=\"0.00\"\n                    className=\"h-14 text-4xl font-bold text-center border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 p-0\"\n                  />\n                </div>\n              </div>\n\n              <Button\n                onClick={handleWithdraw}\n                className=\"w-full h-12 rounded-2xl bg-gradient-to-r from-red-600 via-red-500 to-orange-500 hover:from-red-700 hover:via-red-600 hover:to-orange-600 shadow-lg shadow-red-500/30 text-white font-bold text-sm transition-all duration-300 hover:shadow-xl hover:shadow-red-500/40 hover:scale-[1.02] active:scale-[0.98]\"\n              >\n                {t.profile.confirm}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":14801},"client/src/components/examples/NFTCard.tsx":{"content":"import NFTCard from '../NFTCard';\nimport toyBearImg from '@assets/generated_images/Blue_toy_bear_NFT_bf8296dd.png';\n\nexport default function NFTCardExample() {\n  return (\n    <div className=\"w-48\">\n      <NFTCard\n        name=\"Toy Bear\"\n        itemId=\"#19295\"\n        price=\"29\"\n        image={toyBearImg}\n        backgroundColor=\"#6BB8D8\"\n      />\n    </div>\n  );\n}\n","size_bytes":368},"client/src/components/FilterBar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport GiftPickerModal from \"./GiftPickerModal\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\n\ninterface Gift {\n  id: string;\n  name: string;\n  image: string;\n}\n\ninterface FilterBarProps {\n  onGiftFilterChange?: (giftIds: string[]) => void;\n}\n\nexport default function FilterBar({ onGiftFilterChange }: FilterBarProps) {\n  const { t } = useLanguage();\n  const [selectedGiftIds, setSelectedGiftIds] = useState<string[]>([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const { data: gifts = [] } = useQuery<Gift[]>({\n    queryKey: [\"/api/gifts\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/gifts\");\n      return res.json();\n    },\n  });\n\n  const selectedGifts = gifts.filter((g) => selectedGiftIds.includes(g.id));\n\n  const handleGiftSelect = (giftIds: string[]) => {\n    setSelectedGiftIds(giftIds);\n    onGiftFilterChange?.(giftIds);\n  };\n\n  return (\n    <>\n      <div className=\"px-3 sm:px-4 py-2\">\n        <button\n          onClick={() => setIsModalOpen(true)}\n          className=\"w-full flex items-center justify-between p-3 sm:p-3.5 bg-card/50 border border-card-border rounded-xl hover:bg-card/80 active:scale-[0.98] transition-all duration-200\"\n          data-testid=\"button-select-filter\"\n        >\n          <div className=\"flex items-center gap-2.5 sm:gap-3 flex-1 min-w-0\">\n            {selectedGifts.length > 0 ? (\n              <>\n                <div className=\"flex -space-x-2 flex-shrink-0\">\n                  {selectedGifts.slice(0, 3).map((gift) => (\n                    <div key={gift.id} className=\"w-7 h-7 sm:w-8 sm:h-8 rounded-lg overflow-hidden bg-white shadow-sm border-2 border-background\">\n                      <img\n                        src={gift.image}\n                        alt={gift.name}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                  ))}\n                  {selectedGifts.length > 3 && (\n                    <div className=\"w-7 h-7 sm:w-8 sm:h-8 rounded-lg bg-primary/20 flex items-center justify-center border-2 border-background\">\n                      <span className=\"text-xs font-bold text-primary\">+{selectedGifts.length - 3}</span>\n                    </div>\n                  )}\n                </div>\n                <span className=\"text-sm sm:text-base font-medium text-foreground truncate\">\n                  {t.home.giftsSelected(selectedGifts.length)}\n                </span>\n              </>\n            ) : (\n              <>\n                <div className=\"w-7 h-7 sm:w-8 sm:h-8 rounded-lg bg-gradient-to-br from-primary/10 to-primary/5 flex items-center justify-center flex-shrink-0 border border-primary/20\">\n                  <span className=\"text-base sm:text-lg\">🎁</span>\n                </div>\n                <span className=\"text-sm sm:text-base font-medium text-foreground\">{t.home.selectGift}</span>\n              </>\n            )}\n          </div>\n          <span className=\"text-muted-foreground/60 text-lg sm:text-xl flex-shrink-0\">›</span>\n        </button>\n      </div>\n\n      <GiftPickerModal\n        open={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        gifts={gifts}\n        selectedGiftIds={selectedGiftIds}\n        onSelectGifts={handleGiftSelect}\n      />\n    </>\n  );\n}\n","size_bytes":3390},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 8% 12%;\n\n  --border: 220 8% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 8% 12%;\n\n  --card-border: 220 8% 92%;\n\n  --sidebar: 220 8% 96%;\n\n  --sidebar-foreground: 220 8% 12%;\n\n  --sidebar-border: 220 8% 90%;\n\n  --sidebar-primary: 200 100% 45%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 8% 93%;\n\n  --sidebar-accent-foreground: 220 8% 12%;\n\n  --sidebar-ring: 200 100% 45%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 220 8% 12%;\n\n  --popover-border: 220 8% 90%;\n\n  --primary: 200 100% 45%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 8% 94%;\n\n  --secondary-foreground: 220 8% 12%;\n\n  --muted: 220 8% 95%;\n\n  --muted-foreground: 220 8% 35%;\n\n  --accent: 210 10% 92%;\n\n  --accent-foreground: 220 8% 12%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 8% 80%;\n  --ring: 200 100% 45%;\n  --chart-1: 200 100% 45%;\n  --chart-2: 280 60% 65%;\n  --chart-3: 340 70% 60%;\n  --chart-4: 45 90% 60%;\n  --chart-5: 160 60% 50%;\n\n  --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 8% 12% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 8% 12% / 0.10);\n  --shadow-sm: 0px 1px 2px 0px hsl(220 8% 12% / 0.06), 0px 1px 3px 0px hsl(220 8% 12% / 0.10);\n  --shadow: 0px 1px 3px 0px hsl(220 8% 12% / 0.10), 0px 1px 2px -1px hsl(220 8% 12% / 0.10);\n  --shadow-md: 0px 4px 6px -1px hsl(220 8% 12% / 0.10), 0px 2px 4px -2px hsl(220 8% 12% / 0.10);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 8% 12% / 0.10), 0px 4px 6px -4px hsl(220 8% 12% / 0.10);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 8% 12% / 0.10), 0px 8px 10px -6px hsl(220 8% 12% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 8% 12% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 8% 12%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 220 8% 20%;\n\n  --card: 220 8% 16%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 220 8% 22%;\n\n  --sidebar: 220 8% 14%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 220 8% 18%;\n\n  --sidebar-primary: 200 100% 45%;\n\n  --sidebar-primary-foreground: 0 0% 95%;\n\n  --sidebar-accent: 220 8% 18%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 200 100% 45%;\n\n  --popover: 220 8% 18%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 220 8% 24%;\n\n  --primary: 200 100% 45%;\n\n  --primary-foreground: 0 0% 95%;\n\n  --secondary: 220 8% 20%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 220 8% 18%;\n\n  --muted-foreground: 210 10% 65%;\n\n  --accent: 220 8% 19%;\n\n  --accent-foreground: 0 0% 95%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 0% 95%;\n\n  --input: 220 8% 28%;\n  --ring: 200 100% 45%;\n  --chart-1: 200 100% 55%;\n  --chart-2: 280 60% 70%;\n  --chart-3: 340 70% 70%;\n  --chart-4: 45 90% 65%;\n  --chart-5: 160 60% 60%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.40);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.35), 0px 1px 3px 0px hsl(0 0% 0% / 0.40);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.40), 0px 1px 2px -1px hsl(0 0% 0% / 0.40);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.40), 0px 2px 4px -2px hsl(0 0% 0% / 0.40);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.40), 0px 4px 6px -4px hsl(0 0% 0% / 0.40);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.40), 0px 8px 10px -6px hsl(0 0% 0% / 0.40);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.50);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    /* Telegram Mini App optimizations */\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    -webkit-tap-highlight-color: transparent;\n    /* Safe area support for mobile devices */\n    padding-top: env(safe-area-inset-top);\n    padding-left: env(safe-area-inset-left);\n    padding-right: env(safe-area-inset-right);\n    margin: 0;\n    overflow-x: hidden;\n    position: fixed;\n    width: 100%;\n    height: 100vh;\n    height: 100dvh;\n  }\n\n  /* Telegram Mini App specific styles */\n  .telegram-mini-app {\n    height: 100vh;\n    height: 100dvh;\n    overflow-y: auto;\n    overflow-x: hidden;\n    position: relative;\n  }\n\n  /* Improved touch targets for mobile */\n  button, [role=\"button\"] {\n    min-height: 44px;\n    min-width: 44px;\n  }\n\n  /* Safe area bottom support for fixed navigation */\n  .safe-area-bottom {\n    padding-bottom: env(safe-area-inset-bottom);\n  }\n\n  /* Better scrolling on mobile */\n  .scroll-smooth {\n    -webkit-overflow-scrolling: touch;\n  }\n\n  /* Line clamp utilities */\n  .line-clamp-1 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n  }\n\n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":12580},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  telegramId: text(\"telegram_id\").unique(),\n  username: text(\"username\").notNull(),\n  avatarUrl: text(\"avatar_url\"),\n  referralCode: text(\"referral_code\").notNull().unique(),\n  referredBy: varchar(\"referred_by\").references((): any => users.id),\n  language: text(\"language\").notNull().default(\"en\"),\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).notNull().default(\"0.00\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  referralCode: true,\n  balance: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport const referrals = pgTable(\"referrals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  referrerId: varchar(\"referrer_id\").notNull().references(() => users.id),\n  referredUserId: varchar(\"referred_user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport type Referral = typeof referrals.$inferSelect;\n\nexport const referralEarnings = pgTable(\"referral_earnings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  fromUserId: varchar(\"from_user_id\").notNull().references(() => users.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  depositAmount: decimal(\"deposit_amount\", { precision: 10, scale: 2 }).notNull(),\n  percentage: integer(\"percentage\").notNull().default(3),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport type ReferralEarning = typeof referralEarnings.$inferSelect;\n\nexport const gifts = pgTable(\"gifts\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull().unique(),\n  image: text(\"image\").notNull(),\n});\n\nexport type Gift = typeof gifts.$inferSelect;\n\nexport const channels = pgTable(\"channels\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  channelName: text(\"channel_name\").notNull(),\n  telegramLink: text(\"telegram_link\").notNull(),\n  giftId: varchar(\"gift_id\").notNull().references(() => gifts.id),\n  price: text(\"price\").notNull(),\n  ownerId: varchar(\"owner_id\"),\n  gifts: text(\"gifts\"),\n});\n\nexport const insertChannelSchema = createInsertSchema(channels).omit({\n  id: true,\n});\n\nexport type InsertChannel = z.infer<typeof insertChannelSchema>;\nexport type Channel = typeof channels.$inferSelect;\n\nexport const giftItemSchema = z.object({\n  giftId: z.string(),\n  quantity: z.number().int().positive(),\n});\n\nexport type GiftItem = z.infer<typeof giftItemSchema>;\n","size_bytes":2977},"shared/gifts.ts":{"content":"export const AVAILABLE_GIFTS = [\n  { id: \"1-may\", name: \"1 May\", image: \"/gifts/1 May.jpg\" },\n  { id: \"8-march-cake\", name: \"8 March Cake\", image: \"/gifts/8 March Cake.jpg\" },\n  { id: \"8-march-rose\", name: \"8 march rose\", image: \"/gifts/8 march rose.jpg\" },\n  { id: \"box-of-chocolates\", name: \"Box of chocolates\", image: \"/gifts/Box of chocolates.jpg\" },\n  { id: \"candle-lamp\", name: \"Candle lamp\", image: \"/gifts/Candle lamp.jpg\" },\n  { id: \"cherry-cake\", name: \"Cherry cake\", image: \"/gifts/Cherry cake.jpg\" },\n  { id: \"coconut\", name: \"Coconut\", image: \"/gifts/Coconut.jpg\" },\n  { id: \"crescent-moon\", name: \"Crescent Moon\", image: \"/gifts/Crescent Moon.jpg\" },\n  { id: \"crystal-eagle\", name: \"Crystal eagle\", image: \"/gifts/Crystal eagle.jpg\" },\n  { id: \"easter-basket\", name: \"Easter basket\", image: \"/gifts/Easter basket.jpg\" },\n  { id: \"easter-cake\", name: \"Easter cake\", image: \"/gifts/Easter cake.jpg\" },\n  { id: \"gift-bag\", name: \"Gift Bag\", image: \"/gifts/Gift Bag.jpg\" },\n  { id: \"gold-nipples\", name: \"Gold Nipples\", image: \"/gifts/Gold Nipples.jpg\" },\n  { id: \"heels\", name: \"Heels\", image: \"/gifts/Heels.jpg\" },\n  { id: \"ice-cream-bar\", name: \"Ice cream bar\", image: \"/gifts/Ice cream bar.jpg\" },\n  { id: \"ice-cream-cone\", name: \"Ice cream cone\", image: \"/gifts/Ice cream cone.jpg\" },\n  { id: \"ice-cream-scoops\", name: \"Ice cream scoops\", image: \"/gifts/Ice cream scoops.jpg\" },\n  { id: \"instant-noodles\", name: \"Instant noodles\", image: \"/gifts/Instant noodles.jpg\" },\n  { id: \"leperchaun-pot\", name: \"Leperchaun pot\", image: \"/gifts/Leperchaun pot.jpg\" },\n  { id: \"medal\", name: \"Medal\", image: \"/gifts/Medal.jpg\" },\n  { id: \"money-bouquet\", name: \"Money bouquet\", image: \"/gifts/Money bouquet.jpg\" },\n  { id: \"mosque\", name: \"Mosque\", image: \"/gifts/Mosque.jpg\" },\n  { id: \"peace-dove\", name: \"Peace dove\", image: \"/gifts/Peace dove.jpg\" },\n  { id: \"pink-flamingo\", name: \"Pink Flamingo\", image: \"/gifts/Pink Flamingo.jpg\" },\n  { id: \"poop\", name: \"Poop\", image: \"/gifts/Poop.jpg\" },\n  { id: \"red-star\", name: \"Red star\", image: \"/gifts/Red star.jpg\" },\n  { id: \"sandcastle\", name: \"Sandcastle\", image: \"/gifts/Sandcastle.jpg\" },\n  { id: \"statue-of-liberty\", name: \"Statue of liberty\", image: \"/gifts/Statue of liberty.jpg\" },\n  { id: \"surfboard\", name: \"Surfboard\", image: \"/gifts/Surfboard.jpg\" },\n  { id: \"torch-of-freedom\", name: \"Torch of freedom\", image: \"/gifts/Torch of freedom.jpg\" },\n];\n","size_bytes":2415},"README.md":{"content":"# fedf\n# holdswap\n# lootnew\n# lootnew\n# lootnew\n","size_bytes":48},"client/src/hooks/use-telegram-user.ts":{"content":"\nimport { useEffect, useState } from 'react';\n\ninterface TelegramUser {\n  id: number;\n  first_name: string;\n  last_name?: string;\n  username?: string;\n  photo_url?: string;\n}\n\nexport function useTelegramUser() {\n  const [user, setUser] = useState<TelegramUser | null>(null);\n\n  useEffect(() => {\n    // Check if Telegram WebApp is available\n    if (typeof window !== 'undefined' && (window as any).Telegram?.WebApp) {\n      const tg = (window as any).Telegram.WebApp;\n      const tgUser = tg.initDataUnsafe?.user;\n      \n      if (tgUser) {\n        setUser(tgUser);\n      }\n    }\n  }, []);\n\n  return {\n    user,\n    username: user?.username || user?.first_name || 'johndoe',\n    avatarLetter: (user?.first_name?.[0] || user?.username?.[0] || 'J').toUpperCase(),\n    photoUrl: user?.photo_url\n  };\n}\n","size_bytes":799},"client/src/components/CashbackBanner.tsx":{"content":"\nimport { useEffect, useState } from \"react\";\nimport banner1 from \"@assets/photo_2025-10-21_17-01-20_1761392183281.png\";\nimport banner2 from \"@assets/photo_2025-10-21_17-01-23_1761392181787.png\";\n\nexport default function CashbackBanner() {\n  const [currentBanner, setCurrentBanner] = useState(0);\n  const banners = [banner1, banner2];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentBanner((prev) => (prev + 1) % banners.length);\n    }, 4000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"w-full px-3 pt-3 pb-2\">\n      <div className=\"relative w-full h-24 sm:h-32 md:h-36 overflow-hidden rounded-lg bg-card\">\n        <div\n          className=\"absolute inset-0 flex transition-transform duration-700 ease-in-out\"\n          style={{ transform: `translateX(-${currentBanner * 100}%)` }}\n        >\n          {banners.map((banner, index) => (\n            <div key={index} className=\"flex-shrink-0 w-full h-full\">\n              <img\n                src={banner}\n                alt={`Banner ${index + 1}`}\n                className=\"w-full h-full object-cover\"\n                loading=\"lazy\"\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1252},"client/src/lib/i18n.ts":{"content":"export type Language = 'en' | 'ru';\n\nexport const translations = {\n  en: {\n    nav: {\n      store: 'Store',\n      myAds: 'My Ads',\n      tasks: 'Tasks',\n      profile: 'Profile',\n    },\n    home: {\n      searchPlaceholder: 'Search gifts...',\n      selectGift: 'Select Gift',\n      giftsSelected: (count: number) => `${count} gift${count === 1 ? '' : 's'} selected`,\n      noGifts: 'No gifts available',\n      tryChangingFilter: 'Try changing the filter',\n    },\n    createAd: {\n      title: 'Create Channel',\n      importantInfo: 'Important information for selling channel',\n      beforeAdding: 'Before adding channel:',\n      step1: 'Add @LootGifts_bot to channel administrators',\n      step2: 'Do not remove the bot until the deal is complete!',\n      makeSure: 'Make sure that:',\n      cloudPassword: 'Cloud password enabled minimum 7 days ago',\n      sessionActive: 'Session on device active for at least 24 hours',\n      giftsNotHidden: 'Gifts are not hidden!',\n      telegramLink: 'Telegram Channel Link',\n      verify: 'Verify',\n      gifts: 'Gifts',\n      addGift: 'Add Gift',\n      price: 'Price (TON)',\n      cancel: 'Cancel',\n      create: 'Create',\n      creating: 'Creating...',\n      verifyFirst: 'Verify Channel First',\n    },\n    myAds: {\n      title: 'My Channels',\n      noChannels: 'No Channels',\n      createFirst: 'Create your first channel',\n      deleteConfirm: (name: string) => `Delete channel \"${name}\"?`,\n    },\n    tasks: {\n      title: 'Tasks',\n      totalEarned: 'Total earned',\n      claim: 'Claim',\n      task1: {\n        title: 'Create first listing',\n        description: 'Add your first NFT to the marketplace',\n      },\n      task2: {\n        title: 'Invite a friend',\n        description: 'Share the link with a friend',\n      },\n      task3: {\n        title: 'Make a purchase',\n        description: 'Buy any NFT in the store',\n      },\n      task4: {\n        title: 'Daily check-in',\n        description: 'Open the app every day',\n      },\n      task5: {\n        title: 'Share on social media',\n        description: 'Tell about LootGifts on social networks',\n      },\n    },\n    profile: {\n      title: 'Profile',\n      referralSystem: 'Referral System',\n      referralLink: 'Your Referral Link',\n      copyLink: 'Copy Link',\n      linkCopied: 'Link copied!',\n      referralsCount: 'Total Referrals',\n      referralEarnings: 'Referral Earnings',\n      earnPercent: 'Earn 3% from your friends\\' deposits',\n      language: 'Language',\n      selectLanguage: 'Select Language',\n      english: 'English',\n      russian: 'Русский',\n      deposit: 'Deposit',\n      withdraw: 'Withdraw',\n      depositTitle: 'Deposit TON',\n      withdrawTitle: 'Withdraw TON',\n      amount: 'Amount (TON)',\n      promoCode: 'Promo Code (optional)',\n      promoCodeBonus: '+15% bonus with GIFT promo code',\n      confirm: 'Confirm',\n      cancel: 'Cancel',\n      suspiciousActivity: 'Suspicious Activity',\n      withdrawalBlocked: 'Withdrawal will be available in 24 hours',\n    },\n    giftPicker: {\n      title: 'Select Gifts',\n      selected: (count: number) => `${count} selected`,\n      description: 'Choose one or more gifts from the list',\n      searchPlaceholder: 'Search gifts...',\n      allGifts: 'All Gifts',\n      clearFilters: 'Clear all filters',\n      tapToRemove: 'Tap to remove',\n      tapToAdd: 'Tap to add',\n      noGiftsFound: 'No gifts found',\n      tryDifferentSearch: 'Try a different search query',\n      cancel: 'Cancel',\n      apply: 'Apply',\n    },\n    toast: {\n      success: 'Success!',\n      error: 'Error',\n      warning: 'Warning',\n      channelCreated: 'Channel created',\n      channelDeleted: 'Channel deleted',\n      failedToCreate: 'Failed to create channel',\n      failedToDelete: 'Failed to delete channel',\n      fillAllFields: 'Please fill all required fields and add at least one gift',\n      verificationRequired: 'Please verify your Telegram channel before creating the listing',\n      giftAlreadyAdded: 'This gift is already added',\n      enterTelegramLink: 'Please enter Telegram link and select at least one gift',\n      channelVerified: 'Channel Verified',\n      verificationFailed: 'Verification Failed',\n      failedToVerify: 'Failed to verify Telegram channel',\n      rewardClaimed: 'Reward claimed!',\n      tonAdded: (amount: string) => `+${amount} TON added to balance`,\n    },\n  },\n  ru: {\n    nav: {\n      store: 'Магазин',\n      myAds: 'Мои объявления',\n      tasks: 'Задания',\n      profile: 'Профиль',\n    },\n    home: {\n      searchPlaceholder: 'Поиск подарков...',\n      selectGift: 'Выбрать подарок',\n      giftsSelected: (count: number) => {\n        if (count === 1) return '1 подарок выбран';\n        if (count < 5) return `${count} подарка выбрано`;\n        return `${count} подарков выбрано`;\n      },\n      noGifts: 'Подарки недоступны',\n      tryChangingFilter: 'Попробуйте изменить фильтр',\n    },\n    createAd: {\n      title: 'Создать канал',\n      importantInfo: 'Важная информация для продажи канала',\n      beforeAdding: 'Перед добавлением канала:',\n      step1: 'Добавьте @LootGifts_bot в администраторы канала',\n      step2: 'Не удаляйте бота до конца сделки!',\n      makeSure: 'Убедитесь что:',\n      cloudPassword: 'Облачный пароль включён минимум 7 дней назад',\n      sessionActive: 'Сессия на устройстве активна не менее 24 часов',\n      giftsNotHidden: 'Подарки не скрыты!',\n      telegramLink: 'Ссылка на Telegram канал',\n      verify: 'Проверить',\n      gifts: 'Подарки',\n      addGift: 'Добавить подарок',\n      price: 'Цена (TON)',\n      cancel: 'Отмена',\n      create: 'Создать',\n      creating: 'Создание...',\n      verifyFirst: 'Сначала проверьте канал',\n    },\n    myAds: {\n      title: 'Мои каналы',\n      noChannels: 'Нет каналов',\n      createFirst: 'Создайте свой первый канал',\n      deleteConfirm: (name: string) => `Удалить канал \"${name}\"?`,\n    },\n    tasks: {\n      title: 'Задания',\n      totalEarned: 'Всего заработано',\n      claim: 'Получить',\n      task1: {\n        title: 'Создать первое объявление',\n        description: 'Добавьте свой первый подарок в магазин',\n      },\n      task2: {\n        title: 'Пригласить друга',\n        description: 'Поделитесь ссылкой с другом',\n      },\n      task3: {\n        title: 'Совершить покупку',\n        description: 'Купите любой подарок в магазине',\n      },\n      task4: {\n        title: 'Ежедневный вход',\n        description: 'Открывайте приложение каждый день',\n      },\n      task5: {\n        title: 'Поделиться в соцсетях',\n        description: 'Расскажите о LootGifts в социальных сетях',\n      },\n    },\n    profile: {\n      title: 'Профиль',\n      referralSystem: 'Реферальная система',\n      referralLink: 'Ваша реферальная ссылка',\n      copyLink: 'Копировать ссылку',\n      linkCopied: 'Ссылка скопирована!',\n      referralsCount: 'Всего рефералов',\n      referralEarnings: 'Заработок с рефералов',\n      earnPercent: 'Зарабатывайте 3% от депозитов друзей',\n      language: 'Язык',\n      selectLanguage: 'Выбрать язык',\n      english: 'English',\n      russian: 'Русский',\n      deposit: 'Пополнить',\n      withdraw: 'Вывести',\n      depositTitle: 'Пополнение TON',\n      withdrawTitle: 'Вывод TON',\n      amount: 'Сумма (TON)',\n      promoCode: 'Промокод (необязательно)',\n      promoCodeBonus: '+15% бонус с промокодом GIFT',\n      confirm: 'Подтвердить',\n      cancel: 'Отмена',\n      suspiciousActivity: 'Подозрительная активность',\n      withdrawalBlocked: 'Вывод будет доступен через 24 часа',\n    },\n    giftPicker: {\n      title: 'Выбрать подарки',\n      selected: (count: number) => `Выбрано: ${count}`,\n      description: 'Выберите один или несколько подарков из списка',\n      searchPlaceholder: 'Поиск подарков...',\n      allGifts: 'Все подарки',\n      clearFilters: 'Очистить все фильтры',\n      tapToRemove: 'Нажмите чтобы убрать',\n      tapToAdd: 'Нажмите чтобы добавить',\n      noGiftsFound: 'Подарки не найдены',\n      tryDifferentSearch: 'Попробуйте другой поисковый запрос',\n      cancel: 'Отмена',\n      apply: 'Применить',\n    },\n    toast: {\n      success: 'Успех!',\n      error: 'Ошибка',\n      warning: 'Предупреждение',\n      channelCreated: 'Канал создан',\n      channelDeleted: 'Канал удален',\n      failedToCreate: 'Не удалось создать канал',\n      failedToDelete: 'Не удалось удалить канал',\n      fillAllFields: 'Пожалуйста, заполните все обязательные поля и добавьте хотя бы один подарок',\n      verificationRequired: 'Пожалуйста, проверьте ваш Telegram канал перед созданием объявления',\n      giftAlreadyAdded: 'Этот подарок уже добавлен',\n      enterTelegramLink: 'Пожалуйста, введите ссылку на Telegram и выберите хотя бы один подарок',\n      channelVerified: 'Канал проверен',\n      verificationFailed: 'Проверка не удалась',\n      failedToVerify: 'Не удалось проверить Telegram канал',\n      rewardClaimed: 'Награда получена!',\n      tonAdded: (amount: string) => `+${amount} TON добавлено на баланс`,\n    },\n  },\n};\n\nexport type Translations = typeof translations.en;\n","size_bytes":10616},"client/src/pages/Profile.tsx":{"content":"import { useState } from \"react\";\nimport { Copy, CheckCircle2, Globe, Plus, Minus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport TopHeader from \"@/components/TopHeader\";\nimport BottomNav from \"@/components/BottomNav\";\nimport { useLanguage } from \"@/contexts/LanguageContext\";\nimport { useTelegramUser } from \"@/hooks/use-telegram-user\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport tonLogo from \"@assets/toncoin_1760893904370.png\";\n\nexport default function Profile() {\n  const { language, setLanguage, t } = useLanguage();\n  const { username, avatarLetter } = useTelegramUser();\n  const { toast } = useToast();\n  const [copied, setCopied] = useState(false);\n  const [isDepositOpen, setIsDepositOpen] = useState(false);\n  const [isWithdrawOpen, setIsWithdrawOpen] = useState(false);\n  const [depositAmount, setDepositAmount] = useState(\"\");\n  const [promoCode, setPromoCode] = useState(\"\");\n\n  const referralCode = \"123456789\";\n  const referralLink = `https://t.me/LootGifts_bot?start=${referralCode}`;\n  const totalReferrals = 0;\n  const referralEarnings = \"0.00\";\n\n  const handleCopyLink = async () => {\n    try {\n      await navigator.clipboard.writeText(referralLink);\n      setCopied(true);\n      toast({\n        title: t.profile.linkCopied,\n        duration: 2000,\n      });\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy:', err);\n    }\n  };\n\n  const handleDeposit = () => {\n    const amount = parseFloat(depositAmount);\n    if (!amount || amount < 1) {\n      toast({\n        title: t.toast.error,\n        description: language === 'ru' ? \"Минимальная сумма депозита: 1 TON\" : \"Minimum deposit: 1 TON\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    let finalAmount = amount;\n    if (promoCode.trim().toUpperCase() === \"GIFT\") {\n      finalAmount = amount * 1.15;\n      toast({\n        title: t.toast.success,\n        description: `${amount} TON + 15% ${language === 'ru' ? 'бонус' : 'bonus'} = ${finalAmount.toFixed(2)} TON`,\n      });\n    } else {\n      toast({\n        title: t.toast.success,\n        description: `${language === 'ru' ? 'Депозит' : 'Deposited'} ${finalAmount.toFixed(2)} TON`,\n      });\n    }\n\n    setIsDepositOpen(false);\n    setDepositAmount(\"\");\n    setPromoCode(\"\");\n  };\n\n  const [withdrawAmount, setWithdrawAmount] = useState(\"\");\n\n  const handleWithdraw = () => {\n    const amount = parseFloat(withdrawAmount);\n    if (!amount || amount < 1) {\n      toast({\n        title: t.toast.error,\n        description: language === 'ru' ? \"Минимальная сумма вывода: 1 TON\" : \"Minimum withdrawal: 1 TON\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    toast({\n      title: t.profile.suspiciousActivity,\n      description: t.profile.withdrawalBlocked,\n      variant: \"destructive\",\n    });\n    setIsWithdrawOpen(false);\n    setWithdrawAmount(\"\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground flex flex-col\">\n      <TopHeader />\n      \n      <div className=\"flex-1 px-4 py-6 pb-24 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-xl font-semibold text-foreground\" data-testid=\"text-title\">\n            {t.profile.title}\n          </h1>\n        </div>\n\n        <Card className=\"bg-card border-card-border rounded-2xl p-6\">\n          <div className=\"flex items-center gap-4 mb-4\">\n            <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center\">\n              <span className=\"text-2xl font-bold text-white\">{avatarLetter}</span>\n            </div>\n            <div className=\"flex-1\">\n              <h2 className=\"text-lg font-semibold text-foreground\">{username}</h2>\n              <p className=\"text-sm text-muted-foreground\">@{username.toLowerCase()}</p>\n            </div>\n          </div>\n          \n          </Card>\n\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\n            <span className=\"text-2xl\">🎁</span>\n            {t.profile.referralSystem}\n          </h3>\n          \n          <Card className=\"bg-card border-card-border rounded-2xl p-5\">\n            <p className=\"text-sm text-muted-foreground mb-3\">{t.profile.earnPercent}</p>\n            \n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"text-xs text-muted-foreground mb-2 block\">\n                  {t.profile.referralLink}\n                </label>\n                <div className=\"flex gap-2\">\n                  <input\n                    type=\"text\"\n                    value={referralLink}\n                    readOnly\n                    className=\"flex-1 px-3 py-2 text-sm bg-muted border border-border rounded-lg text-foreground\"\n                    data-testid=\"input-referral-link\"\n                  />\n                  <Button\n                    onClick={handleCopyLink}\n                    className=\"px-4 bg-primary hover:bg-primary/90\"\n                    data-testid=\"button-copy-link\"\n                  >\n                    {copied ? (\n                      <CheckCircle2 className=\"w-4 h-4\" />\n                    ) : (\n                      <Copy className=\"w-4 h-4\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-3 pt-2\">\n                <div className=\"bg-muted/50 rounded-xl p-4\">\n                  <p className=\"text-xs text-muted-foreground mb-1\">{t.profile.referralsCount}</p>\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-referrals-count\">\n                    {totalReferrals}\n                  </p>\n                </div>\n                <div className=\"bg-muted/50 rounded-xl p-4\">\n                  <p className=\"text-xs text-muted-foreground mb-1\">{t.profile.referralEarnings}</p>\n                  <div className=\"flex items-center gap-1.5\">\n                    <img src={tonLogo} alt=\"TON\" className=\"w-4 h-4 rounded-full\" />\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-referral-earnings\">\n                      {referralEarnings}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\n            <Globe className=\"w-5 h-5\" />\n            {t.profile.language}\n          </h3>\n          \n          <Card className=\"bg-card border-card-border rounded-2xl p-5\">\n            <label className=\"text-sm text-muted-foreground mb-3 block\">\n              {t.profile.selectLanguage}\n            </label>\n            <Select value={language} onValueChange={(value) => setLanguage(value as any)}>\n              <SelectTrigger className=\"w-full bg-muted border-border\" data-testid=\"select-language\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"en\" data-testid=\"option-en\">\n                  🇬🇧 {t.profile.english}\n                </SelectItem>\n                <SelectItem value=\"ru\" data-testid=\"option-ru\">\n                  🇷🇺 {t.profile.russian}\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </Card>\n        </div>\n      </div>\n\n      <BottomNav activeTab=\"profile\" />\n\n      <Dialog open={isDepositOpen} onOpenChange={setIsDepositOpen}>\n        <DialogContent className=\"bg-card border-card-border rounded-3xl\">\n          <DialogHeader>\n            <DialogTitle className=\"text-foreground text-xl\">{t.profile.depositTitle}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-5 pt-2\">\n            <div>\n              <Label htmlFor=\"deposit-amount\" className=\"text-sm text-muted-foreground mb-3 block\">\n                {t.profile.amount}\n              </Label>\n              <div className=\"flex items-center gap-3 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-2xl p-4 border-2 border-blue-500/20\">\n                <img src={tonLogo} alt=\"TON\" className=\"w-8 h-8 rounded-full flex-shrink-0\" />\n                <Input\n                  id=\"deposit-amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"1\"\n                  value={depositAmount}\n                  onChange={(e) => setDepositAmount(e.target.value)}\n                  placeholder=\"1.00\"\n                  className=\"flex-1 border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 text-lg font-semibold\"\n                />\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-2 ml-1\">{language === 'ru' ? 'Минимум: 1 TON' : 'Minimum: 1 TON'}</p>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"promo-code\" className=\"text-sm text-muted-foreground mb-3 block\">\n                {t.profile.promoCode}\n              </Label>\n              <Input\n                id=\"promo-code\"\n                type=\"text\"\n                value={promoCode}\n                onChange={(e) => setPromoCode(e.target.value.toUpperCase())}\n                placeholder={language === 'ru' ? 'Введите промокод' : 'Enter promo code'}\n                className=\"uppercase bg-muted/50 border-border rounded-xl h-12 text-base\"\n              />\n            </div>\n\n            <div className=\"flex gap-3 pt-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setIsDepositOpen(false);\n                  setDepositAmount(\"\");\n                  setPromoCode(\"\");\n                }}\n                className=\"flex-1 h-12 rounded-xl\"\n              >\n                {t.profile.cancel}\n              </Button>\n              <Button\n                onClick={handleDeposit}\n                className=\"flex-1 h-12 rounded-xl bg-gradient-to-r from-green-600 to-green-500 hover:from-green-700 hover:to-green-600 shadow-lg shadow-green-500/25\"\n              >\n                {t.profile.confirm}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isWithdrawOpen} onOpenChange={setIsWithdrawOpen}>\n        <DialogContent className=\"bg-card border-card-border rounded-3xl\">\n          <DialogHeader>\n            <DialogTitle className=\"text-foreground text-xl\">{t.profile.withdrawTitle}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-5 pt-2\">\n            <div>\n              <Label htmlFor=\"withdraw-amount\" className=\"text-sm text-muted-foreground mb-3 block\">\n                {t.profile.amount}\n              </Label>\n              <div className=\"flex items-center gap-3 bg-gradient-to-r from-red-500/10 to-orange-500/10 rounded-2xl p-4 border-2 border-red-500/20\">\n                <img src={tonLogo} alt=\"TON\" className=\"w-8 h-8 rounded-full flex-shrink-0\" />\n                <Input\n                  id=\"withdraw-amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  min=\"1\"\n                  value={withdrawAmount}\n                  onChange={(e) => setWithdrawAmount(e.target.value)}\n                  placeholder=\"1.00\"\n                  className=\"flex-1 border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 text-lg font-semibold\"\n                />\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-2 ml-1\">{language === 'ru' ? 'Минимум: 1 TON' : 'Minimum: 1 TON'}</p>\n            </div>\n\n            <div className=\"flex gap-3 pt-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setIsWithdrawOpen(false);\n                  setWithdrawAmount(\"\");\n                }}\n                className=\"flex-1 h-12 rounded-xl\"\n              >\n                {t.profile.cancel}\n              </Button>\n              <Button\n                onClick={handleWithdraw}\n                className=\"flex-1 h-12 rounded-xl bg-gradient-to-r from-red-600 to-red-500 hover:from-red-700 hover:to-red-600 shadow-lg shadow-red-500/25\"\n              >\n                {t.profile.confirm}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":12854},"client/src/contexts/LanguageContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { Language, translations, Translations } from '@/lib/i18n';\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: Translations;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguageState] = useState<Language>(() => {\n    const saved = localStorage.getItem('language');\n    return (saved as Language) || 'en';\n  });\n\n  const setLanguage = (lang: Language) => {\n    setLanguageState(lang);\n    localStorage.setItem('language', lang);\n  };\n\n  const value = {\n    language,\n    setLanguage,\n    t: translations[language],\n  };\n\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within LanguageProvider');\n  }\n  return context;\n}\n","size_bytes":1106}},"version":2}