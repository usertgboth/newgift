
import { useEffect, useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Clock, AlertCircle, CheckCircle2, User, Info, ShieldAlert } from 'lucide-react';
import { useLanguage } from '@/contexts/LanguageContext';
import { useToast } from '@/hooks/use-toast';
import { useMutation } from '@tanstack/react-query';

interface SellerNotificationProps {
  open: boolean;
  onClose: () => void;
  purchaseId: string;
  buyerUsername: string;
  channelName: string;
  expiresAt: Date;
}

export default function SellerNotification({
  open,
  onClose,
  purchaseId,
  buyerUsername,
  channelName,
  expiresAt,
}: SellerNotificationProps) {
  const { language } = useLanguage();
  const { toast } = useToast();
  const [timeLeft, setTimeLeft] = useState('');
  const [confirmed, setConfirmed] = useState(false);

  useEffect(() => {
    const timer = setInterval(() => {
      const now = new Date().getTime();
      const distance = new Date(expiresAt).getTime() - now;

      if (distance < 0) {
        setTimeLeft(language === 'ru' ? '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ' : 'Time expired');
        clearInterval(timer);
        return;
      }

      const hours = Math.floor(distance / (1000 * 60 * 60));
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);

      setTimeLeft(`${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);
    }, 1000);

    return () => clearInterval(timer);
  }, [expiresAt, language]);

  const confirmMutation = useMutation({
    mutationFn: async () => {
      const res = await fetch(`/api/purchases/${purchaseId}/confirm-seller`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });

      if (!res.ok) {
        throw new Error('Failed to confirm transfer');
      }

      return res.json();
    },
    onSuccess: () => {
      setConfirmed(true);
      toast({
        title: language === 'ru' ? '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è' : 'Waiting for buyer',
        description: language === 'ru' 
          ? '–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è' 
          : 'Waiting for buyer confirmation',
      });
    },
    onError: () => {
      toast({
        title: language === 'ru' ? '–û—à–∏–±–∫–∞' : 'Error',
        description: language === 'ru' 
          ? '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É' 
          : 'Failed to confirm transfer',
        variant: 'destructive',
      });
    },
  });

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-lg">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-xl">
            <CheckCircle2 className="w-6 h-6 text-green-500" />
            {language === 'ru' ? 'üéâ –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!' : 'üéâ New Purchase!'}
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          {/* –ü–æ–∫—É–ø–∞—Ç–µ–ª—å */}
          <div className="p-4 bg-gradient-to-br from-blue-500/10 to-cyan-500/10 border border-blue-500/30 rounded-xl">
            <div className="flex items-center gap-3">
              <User className="w-5 h-5 text-blue-500" />
              <div>
                <p className="text-xs text-muted-foreground mb-1">
                  {language === 'ru' ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:' : 'Buyer:'}
                </p>
                <p className="text-lg font-bold text-blue-500">@{buyerUsername}</p>
              </div>
            </div>
          </div>

          {/* –ö–∞–Ω–∞–ª */}
          <div className="p-4 bg-gradient-to-br from-purple-500/10 to-pink-500/10 border border-purple-500/30 rounded-xl">
            <p className="text-xs text-muted-foreground mb-2">
              {language === 'ru' ? '–ö–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:' : 'Channel to transfer:'}
            </p>
            <p className="text-lg font-bold text-foreground">{channelName}</p>
          </div>

          {/* –¢–∞–π–º–µ—Ä */}
          <div className="relative overflow-hidden">
            <div className="absolute inset-0 bg-gradient-to-r from-orange-500/5 via-red-500/5 to-orange-500/5 animate-pulse" />
            <div className="relative flex flex-col items-center justify-center gap-2 p-5 bg-gradient-to-br from-orange-500/10 to-red-500/10 border-2 border-orange-500/30 rounded-xl">
              <Clock className="w-6 h-6 text-orange-500" />
              <div className="text-center">
                <p className="text-xs text-muted-foreground mb-1">
                  {language === 'ru' ? '–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏' : 'Time remaining'}
                </p>
                <span className="text-3xl font-bold text-orange-500 tabular-nums">{timeLeft}</span>
              </div>
            </div>
          </div>

          {/* –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
          <div className="p-5 bg-gradient-to-br from-indigo-500/5 to-blue-500/5 border border-indigo-500/20 rounded-xl space-y-4">
            <div className="flex items-center gap-2">
              <Info className="w-5 h-5 text-indigo-500" />
              <p className="text-sm font-bold text-foreground">
                {language === 'ru' ? '–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:' : 'What you need to do:'}
              </p>
            </div>
            
            <div className="space-y-3">
              <div className="flex gap-3">
                <div className="flex-shrink-0 w-6 h-6 rounded-full bg-indigo-500 text-white flex items-center justify-center text-xs font-bold">1</div>
                <div className="flex-1">
                  <p className="text-sm font-medium text-foreground mb-1">
                    {language === 'ru' ? '–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è' : 'Wait for the buyer'}
                  </p>
                  <p className="text-xs text-muted-foreground leading-relaxed">
                    {language === 'ru' 
                      ? '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å @' + buyerUsername + ' –¥–æ–ª–∂–µ–Ω —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –∏ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≤–∞—à –∫–∞–Ω–∞–ª.'
                      : 'The buyer @' + buyerUsername + ' should contact you and join your channel.'}
                  </p>
                </div>
              </div>

              <div className="flex gap-3">
                <div className="flex-shrink-0 w-6 h-6 rounded-full bg-indigo-500 text-white flex items-center justify-center text-xs font-bold">2</div>
                <div className="flex-1">
                  <p className="text-sm font-medium text-foreground mb-1">
                    {language === 'ru' ? '–î–æ–±–∞–≤—å—Ç–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã' : 'Add as administrator'}
                  </p>
                  <p className="text-xs text-muted-foreground leading-relaxed">
                    {language === 'ru' 
                      ? '–î–æ–±–∞–≤—å—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏.'
                      : 'Add the buyer as a channel administrator with full rights.'}
                  </p>
                </div>
              </div>

              <div className="flex gap-3">
                <div className="flex-shrink-0 w-6 h-6 rounded-full bg-indigo-500 text-white flex items-center justify-center text-xs font-bold">3</div>
                <div className="flex-1">
                  <p className="text-sm font-medium text-foreground mb-1">
                    {language === 'ru' ? '–ü–µ—Ä–µ–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞' : 'Transfer ownership rights'}
                  </p>
                  <p className="text-xs text-muted-foreground leading-relaxed">
                    {language === 'ru' 
                      ? '–ü–µ—Ä–µ–¥–∞–π—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–Ω–∞–ª–∞.'
                      : 'Transfer all channel ownership rights to the buyer. This is done in channel settings.'}
                  </p>
                </div>
              </div>

              <div className="flex gap-3">
                <div className="flex-shrink-0 w-6 h-6 rounded-full bg-green-500 text-white flex items-center justify-center text-xs font-bold">4</div>
                <div className="flex-1">
                  <p className="text-sm font-medium text-foreground mb-1">
                    {language === 'ru' ? '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—á—É' : 'Confirm the transfer'}
                  </p>
                  <p className="text-xs text-muted-foreground leading-relaxed">
                    {language === 'ru' 
                      ? '–ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∞–≤, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É" –Ω–∏–∂–µ.'
                      : 'After transferring rights, click the "Confirm Transfer" button below.'}
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* –ö—Ä–∏—Ç–∏—á–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ */}
          <div className="p-4 bg-red-500/10 border-2 border-red-500/30 rounded-xl">
            <div className="flex items-start gap-3">
              <ShieldAlert className="w-5 h-5 text-red-500 mt-0.5 flex-shrink-0" />
              <div className="space-y-2">
                <p className="text-sm font-bold text-red-600 dark:text-red-400">
                  {language === 'ru' ? '‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–ù–û!' : '‚ö†Ô∏è CRITICALLY IMPORTANT!'}
                </p>
                <p className="text-xs text-muted-foreground leading-relaxed">
                  {language === 'ru' 
                    ? '–ù–ï –£–î–ê–õ–Ø–ô–¢–ï –ë–û–¢–ê –ò–ó –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í –ö–ê–ù–ê–õ–ê! –ï—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç–µ –±–æ—Ç–∞, –¥–µ–Ω—å–≥–∏ –Ω–µ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å, –∏ —Å–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏.'
                    : 'DO NOT REMOVE THE BOT FROM CHANNEL ADMINS! If you remove the bot, the money will not be credited to your balance and the deal will be cancelled. The bot must remain in admins to confirm the transfer.'}
                </p>
              </div>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ */}
          <div className="p-3 bg-yellow-500/10 border border-yellow-500/20 rounded-lg">
            <div className="flex items-start gap-2">
              <AlertCircle className="w-4 h-4 text-yellow-500 mt-0.5 flex-shrink-0" />
              <p className="text-xs text-muted-foreground leading-relaxed">
                {language === 'ru' 
                  ? '–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∏ –≤—ã, –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—á—É –∫–∞–Ω–∞–ª–∞.'
                  : 'The deal will be completed only after confirmation from both parties. You will receive payment after both you and the buyer confirm the channel transfer.'}
              </p>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
          <Button
            onClick={() => confirmMutation.mutate()}
            disabled={confirmMutation.isPending || confirmed}
            className="w-full h-12 text-base font-bold bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 shadow-lg"
            data-testid="button-confirm-seller"
          >
            {confirmed 
              ? (language === 'ru' ? '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è...' : '‚úÖ Confirmed - Waiting for buyer...') 
              : (language === 'ru' ? '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∫–∞–Ω–∞–ª–∞' : '‚úÖ Confirm Channel Transfer')}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
